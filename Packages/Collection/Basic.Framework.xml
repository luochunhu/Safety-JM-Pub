<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Basic.Framework</name>
    </assembly>
    <members>
        <member name="T:Basic.Framework.Caching.CacheManager">
            <summary>
                作者：罗春虎
            创建时间：2016-7-27
            功能描述：统一缓存管理
            </summary>
        </member>
        <member name="M:Basic.Framework.Caching.CacheManager.GetCacheProvider(Basic.Framework.Caching.CacheStoreType,System.String)">
            <summary>
            获取缓存实例
            </summary>
            <param name="cacheType">缓存类型</param>
            <param name="redisServer">redis服务器地址</param>
            <returns></returns>
        </member>
        <member name="F:Basic.Framework.Caching.CacheManager.debugCache">
            <summary>
            
            </summary>
        </member>
        <member name="M:Basic.Framework.Caching.CacheManager.GetCache(System.String)">
            <summary>
            根据服务地址获取缓存实例
            </summary>
            <param name="redisServer">redis缓存服务地址</param>
            <returns></returns>
        </member>
        <member name="P:Basic.Framework.Caching.CacheManager.MemoryCache">
            <summary>
            内存模型缓存示例
            </summary>
        </member>
        <member name="P:Basic.Framework.Caching.CacheManager.DefaultRedisCache">
            <summary>
            默认redis缓存实例
            </summary>
        </member>
        <member name="T:Basic.Framework.Caching.CacheStoreType">
            <summary>
                作者：罗春虎
            创建时间：2016-7-27
            功能描述：缓存实现类型
            </summary>
        </member>
        <member name="F:Basic.Framework.Caching.CacheStoreType.MemeoryCache">
            <summary>
            内存模式
            </summary>
        </member>
        <member name="F:Basic.Framework.Caching.CacheStoreType.RedisCache">
            <summary>
            redis模式
            </summary>
        </member>
        <member name="F:Basic.Framework.Caching.CacheStoreType.MongoDBCache">
            <summary>
            MongoDB缓存
            </summary>
        </member>
        <member name="T:Basic.Framework.Caching.ICache">
            <summary>
                作者：罗春虎
            创建时间：2016-7-27
            功能描述：统一缓存模块接口
            </summary>
        </member>
        <member name="M:Basic.Framework.Caching.ICache.AddOrUpdate``1(System.String,``0)">
            <summary>
            添加或更新缓存
            </summary>
            <param name="key">缓存键值</param>
            <param name="cache">缓存项</param>
        </member>
        <member name="M:Basic.Framework.Caching.ICache.AddOrUpdate``1(System.String,``0,System.Int32)">
            <summary>
            添加或更新缓存
            </summary>
            <param name="key">缓存键值</param>
            <param name="cache">缓存项</param>
            <param name="timeOut">过期时间，单位秒</param>
        </member>
        <member name="M:Basic.Framework.Caching.ICache.GetCache(System.String)">
            <summary>
            获取缓存项
            </summary>
            <param name="key">缓存键值</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Caching.ICache.GetCache``1(System.String)">
            <summary>
            获取缓存项
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="key">缓存键值</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Caching.ICache.Remove(System.String)">
            <summary>
            移除缓存项
            </summary>
            <param name="key">缓存键值</param>
        </member>
        <member name="M:Basic.Framework.Caching.ICache.Contains(System.String)">
            <summary>
            是否包括缓存键
            </summary>
            <param name="key">缓存键值</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Caching.ICache.Keys(System.String,System.Int32)">
            <summary>
            枚举所有的keys
            </summary>
            <param name="pattern"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="P:Basic.Framework.Caching.ICache.TimeOut">
            <summary>
            默认缓存过期时间
            </summary>
        </member>
        <member name="P:Basic.Framework.Caching.ICache.IsReady">
            <summary>
            是否准备就绪
            </summary>
        </member>
        <member name="T:Basic.Framework.Caching.MemoryCacheItem">
            <summary>
                作者：罗春虎
            创建时间：2016-7-27
            功能描述：内存模式缓存项
            </summary>
        </member>
        <member name="T:Basic.Framework.Caching.MemoryCacheProvider">
            <summary>
                作者：罗春虎
            创建时间：2016-7-27
            功能描述：内存模式缓存实现
            </summary>
        </member>
        <member name="M:Basic.Framework.Caching.MemoryCacheProvider.#cctor">
            <summary>
            静态构造函数，自动处理缓存失效数据
            </summary>
        </member>
        <member name="F:Basic.Framework.Caching.MemoryCacheProvider.caches">
            <summary>
            缓存内存模式数据结构
            </summary>
        </member>
        <member name="F:Basic.Framework.Caching.MemoryCacheProvider.timeOut">
            <summary>
            默认缓存失效时间为20分钟
            </summary>
        </member>
        <member name="M:Basic.Framework.Caching.MemoryCacheProvider.AddOrUpdate``1(System.String,``0)">
            <summary>
            添加或者更新缓存
            </summary>
            <typeparam name="T">缓存值的类型</typeparam>
            <param name="key">键</param>
            <param name="cache">缓存项</param>
        </member>
        <member name="M:Basic.Framework.Caching.MemoryCacheProvider.AddOrUpdate``1(System.String,``0,System.Int32)">
            <summary>
            添加或者更新缓存
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">键</param>
            <param name="cache">缓存值</param>
            <param name="timeOut">失效时间：单位秒</param>
        </member>
        <member name="M:Basic.Framework.Caching.MemoryCacheProvider.Contains(System.String)">
            <summary>
            是否存在key
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Caching.MemoryCacheProvider.GetCache(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Caching.MemoryCacheProvider.GetCache``1(System.String)">
            <summary>
            泛型方法获取缓存
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Caching.MemoryCacheProvider.Remove(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="key">要移除缓存的键</param>
        </member>
        <member name="M:Basic.Framework.Caching.MemoryCacheProvider.Keys(System.String,System.Int32)">
            <summary>
            获取所有的keys
            </summary>
            <param name="pattern">匹配模式</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="P:Basic.Framework.Caching.MemoryCacheProvider.TimeOut">
            <summary>
            缓存失效时间
            </summary>
        </member>
        <member name="T:Basic.Framework.Caching.MongdbImp.IMongoDBCache">
            <summary>
            Mongo数据库缓存接口
            </summary>
        </member>
        <member name="M:Basic.Framework.Caching.MongdbImp.IMongoDBCache.Find``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            获取数据
            </summary>
            <param name="predicate">表达式</param>
            <param name="isCopy">是否复制</param>
            <returns>符合表达式条件的所有数据</returns>
        </member>
        <member name="T:Basic.Framework.Entities.CacheEntity">
            <summary>
            缓存实体基类
            </summary>
        </member>
        <member name="T:Basic.Framework.Web.BasicInfo">
            <summary>
            实体基类
            </summary>
        </member>
        <member name="M:Basic.Framework.Entities.CacheEntity.#ctor">
            <summary>
            给对象初值
            </summary>
        </member>
        <member name="P:Basic.Framework.Entities.CacheEntity.Id">
            <summary>
            缓存唯一主键
            </summary>
        </member>
        <member name="M:Basic.Framework.Caching.MongdbImp.MongoDBCacheProvider.#cctor">
            <summary>
            处理过期数据
            </summary>
        </member>
        <member name="F:Basic.Framework.Caching.MongdbImp.MongoDbClient.database">
            <summary>
            数据库对象
            </summary>
        </member>
        <member name="M:Basic.Framework.Caching.MongdbImp.MongoDbClient.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="conString">连接字符串</param>
        </member>
        <member name="M:Basic.Framework.Caching.MongdbImp.MongoDbClient.GetColletion``1(System.String)">
             <summary>
             创建集合对象
             </summary>
             <param name="collName">集合名称</param>
            <returns>集合对象</returns>
        </member>
        <member name="M:Basic.Framework.Caching.MongdbImp.MongoDbClient.Insert``1(``0)">
            <summary>
            插入对象
            </summary>     
            <param name="entity">插入的对象</param>
        </member>
        <member name="M:Basic.Framework.Caching.MongdbImp.MongoDbClient.Insert``1(System.String,``0)">
            <summary>
            插入对象
            </summary>
            <param name="collName">集合名称</param>
            <param name="entity">插入的对象</param>
        </member>
        <member name="M:Basic.Framework.Caching.MongdbImp.MongoDbClient.InsertBath``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            批量插入
            </summary>       
            <param name="entities">要插入的对象集合</param>
        </member>
        <member name="M:Basic.Framework.Caching.MongdbImp.MongoDbClient.InsertBath``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            批量插入
            </summary>
            <param name="collName">集合名称</param>
            <param name="entities">要插入的对象集合</param>
        </member>
        <member name="M:Basic.Framework.Caching.MongdbImp.MongoDbClient.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            按条件表达式删除
            </summary>    
            <param name="predicate">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Caching.MongdbImp.MongoDbClient.Delete``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            按条件表达式删除
            </summary>
            <param name="collName">集合名称</param>
            <param name="predicate">条件表达式</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Basic.Framework.Caching.MongdbImp.MongoDbClient.Delete``1(MongoDB.Driver.FilterDefinition{``0})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Basic.Framework.Caching.MongdbImp.MongoDbClient.Delete``1(System.String,MongoDB.Driver.FilterDefinition{``0})”忽略有格式错误的 XML 注释 -->
        <member name="M:Basic.Framework.Caching.MongdbImp.MongoDbClient.Update``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.UpdateDefinition{``0},System.Boolean)">
            <summary>
            修改文档
            </summary>       
            <param name="filter">修改条件</param>
            <param name="update">修改结果</param>
            <param name="upsert">是否插入新文档（filter条件满足就更新，否则插入新文档）</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Caching.MongdbImp.MongoDbClient.Update``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.UpdateDefinition{``0},System.Boolean)">
            <summary>
            修改文档
            </summary>
            <param name="collName">集合名称</param>
            <param name="filter">修改条件</param>
            <param name="update">修改结果</param>
            <param name="upsert">是否插入新文档（filter条件满足就更新，否则插入新文档）</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Caching.MongdbImp.MongoDbClient.Update``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0,System.Boolean)">
            <summary>
            用新对象替换新文档
            </summary>       
            <param name="filter">修改条件</param>
            <param name="entity">新对象</param>
            <param name="upsert">是否插入新文档（filter条件满足就更新，否则插入新文档）</param>
            <returns>修改影响文档数</returns>
        </member>
        <member name="M:Basic.Framework.Caching.MongdbImp.MongoDbClient.Update``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0,System.Boolean)">
            <summary>
            用新对象替换新文档
            </summary>
            <param name="collName">集合名称</param>
            <param name="filter">修改条件</param>
            <param name="entity">新对象</param>
            <param name="upsert">是否插入新文档（filter条件满足就更新，否则插入新文档）</param>
            <returns>修改影响文档数</returns>
        </member>
        <member name="M:Basic.Framework.Caching.MongdbImp.MongoDbClient.BatchUpdate``1(System.Collections.Generic.List{``0})">
            <summary>
            批量更新
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="item"></param>
        </member>
        <member name="M:Basic.Framework.Caching.MongdbImp.MongoDbClient.GetQueryable``1">
            <summary>
            查询，复杂查询直接用Linq处理
            </summary>       
            <returns>要查询的对象</returns>
        </member>
        <member name="M:Basic.Framework.Caching.MongdbImp.MongoDbClient.GetQueryable``1(System.String)">
            <summary>
            查询，复杂查询直接用Linq处理
            </summary>
            <param name="collName">集合名称</param>
            <returns>要查询的对象</returns>
        </member>
        <member name="M:Basic.Framework.Caching.MongdbImp.MongoDbClient.Find``1(System.String)">
            <summary>
            根据Id查询
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Caching.MongdbImp.MongoDbClient.First``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件获取第一个
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Caching.MongdbImp.MongoDbClient.Find``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件获取集合
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Caching.MongdbImp.MongoDbClient.FindAll``1">
            <summary>
            获取所有
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Caching.RedisCacheProvider">
            <summary>
                作者：罗春虎
            创建时间：2016-7-27
            功能描述：redis缓存实现
            </summary>
        </member>
        <member name="M:Basic.Framework.Caching.RedisCacheProvider.#ctor(System.String)">
            <summary>
            构造函数-设置缓存服务器
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:Basic.Framework.Caching.RedisCacheProvider.AddOrUpdate``1(System.String,``0)">
            <summary>
            添加或者修改缓存项
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">键</param>
            <param name="cache">缓存项</param>
        </member>
        <member name="M:Basic.Framework.Caching.RedisCacheProvider.AddOrUpdate``1(System.String,``0,System.Int32)">
            <summary>
            添加或者修改缓存项
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">键</param>
            <param name="cache">缓存项</param>
            <param name="timeOut">失效时间</param>
        </member>
        <member name="M:Basic.Framework.Caching.RedisCacheProvider.Contains(System.String)">
            <summary>
            是否存在键
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Caching.RedisCacheProvider.GetCache(System.String)">
            <summary>
            获取缓存内容
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Caching.RedisCacheProvider.GetCache``1(System.String)">
            <summary>
            泛型方法获取缓存内容
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Caching.RedisCacheProvider.Remove(System.String)">
            <summary>
            移除键
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Basic.Framework.Caching.RedisCacheProvider.Keys(System.String,System.Int32)">
            <summary>
            获取指定匹配模式的所有key值
            </summary>
            <param name="pattern"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Caching.RedisCacheProvider.Enqueue``1(System.String,``0)">
            <summary>
            入队列
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Caching.RedisCacheProvider.Dequeue``1(System.String)">
            <summary>
            出队列
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Caching.RedisCacheProvider.DequeueList``1(System.String,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Caching.RedisCacheProvider.GetQueueMessageCount(System.String)">
            <summary>
            获取对应消息的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Caching.RedisCacheProvider.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:Basic.Framework.Caching.RedisCacheProvider.TimeOut">
            <summary>
            缓存过期时间
            </summary>
        </member>
        <member name="P:Basic.Framework.Caching.RedisCacheProvider.IsReady">
            <summary>
            /
            </summary>
        </member>
        <member name="T:Basic.Framework.Caching.RedisManager">
            <summary>
                作者：罗春虎
            创建时间：2016-7-27
            功能描述：redis缓存实例管理器
            </summary>
        </member>
        <member name="M:Basic.Framework.Caching.RedisManager.GetManager(System.String)">
            <summary>
            获取redis实例
            </summary>
            <param name="server">服务器</param>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Caching.RedisSubscriber">
            <summary>
                作者：罗春虎
            创建时间：2016-7-27
            功能描述：redis发布订阅模式实现
            </summary>
        </member>
        <member name="M:Basic.Framework.Caching.RedisSubscriber.Subscribe(System.String,StackExchange.Redis.RedisChannel,System.Action{StackExchange.Redis.RedisChannel,StackExchange.Redis.RedisValue})">
            <summary>
            订阅消息
            </summary>
            <param name="server">消息服务器</param>
            <param name="channel">频道</param>
            <param name="handler">处理回调函数</param>
        </member>
        <member name="M:Basic.Framework.Caching.RedisSubscriber.Unsubscribe(System.String,StackExchange.Redis.RedisChannel,System.Action{StackExchange.Redis.RedisChannel,StackExchange.Redis.RedisValue})">
            <summary>
            取消订阅
            </summary>
            <param name="server">消息服务器</param>
            <param name="channel">频道</param>
            <param name="handler">处理回调函数</param>
        </member>
        <member name="M:Basic.Framework.Caching.RedisSubscriber.UnsubscribeAll(System.String)">
            <summary>
            取消所有订阅
            </summary>
            <param name="server">订阅服务器</param>
        </member>
        <member name="M:Basic.Framework.Caching.RedisSubscriber.Publish(System.String,StackExchange.Redis.RedisChannel,StackExchange.Redis.RedisValue)">
            <summary>
            发送消息
            </summary>
            <param name="server">订阅服务器</param>
            <param name="channel">频道</param>
            <param name="message">消息（json格式字符串对象）</param>
        </member>
        <member name="T:Basic.Framework.Common.AppConfigHelper">
            <summary>
            开发者：邱勇
            时间：20170617
            appConfig操作辅助类  
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.AppConfigHelper.GetAppSetting(System.String,System.String)">
            <summary>
            获取appSetting节点的值
            </summary>
            <param name="key">配置项名称</param>
            <param name="filePath">配置项值</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.AppConfigHelper.SaveAppSetting(System.String,System.String,System.String)">
            <summary>
            保存appSetting配置
            </summary>
            <param name="key">配置项名称</param>
            <param name="value">配置项值</param>
            <param name="filePath">配置文件路径（如为自己的配置文件，则不传此参数）</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.AppConfigHelper.GetConnectionStringsConfig(System.String)">
            <summary>
            获取配置文件中数据库连接字符串
            </summary>
            <param name="connectionName">数据库配置节点名称</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.AppConfigHelper.SaveConnectionStringsConfig(System.String,System.String,System.String)">
            <summary>
            保存连接字符串
            </summary>
            <param name="newName">数据库配置节点名称</param>
            <param name="newConString">连接配置</param>
            <param name="newProviderName">数据库类型Provider名称</param>
        </member>
        <member name="T:Basic.Framework.Common.AssemblyManager">
            <summary>
            .net 反射管理类
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.AssemblyManager.CreateInstance(System.String,System.String,System.Object[])">
            <summary>
            通过反射机制创建对象实例
            </summary>
            <param name="assemblyName">程序集名</param>
            <param name="typeName">类型</param>
            <param name="args">参数</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:Basic.Framework.Common.AssemblyManager.CreateInstance(System.String,System.String,System.Object[],System.String)">
            <summary>
            通过反射机制创建对象实例并调用对象的方法
            </summary>
            <param name="assemblyName">程序集名</param>
            <param name="typeName">类型</param>
            <param name="args">参数</param>
            <param name="ClassName">方法名称</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:Basic.Framework.Common.AssemblyManager.CreateInstance(System.String,System.String)">
            <summary>
            通过反射机制创建对象实例
            </summary>
            <param name="assemblyName">程序集名</param>
            <param name="typeName">类型</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:Basic.Framework.Common.AssemblyManager.CreateInstance``1">
            <summary>
            根据对象类型,直接建立对象实例
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns>对象实例</returns>
        </member>
        <member name="M:Basic.Framework.Common.AssemblyManager.CreateInstance``1(System.Object[])">
            <summary>
            根据对象类型和创建参数,直接建立对象实例
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="args">对象参数</param>
            <returns>对象实例</returns>
        </member>
        <member name="T:Basic.Framework.Common.DES3Helper">
            <summary>
            三重des加密算法实现辅助类
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.DES3Helper.EncryptString(System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.DES3Helper.DecryptString(System.String)">
            <summary>
            解密字符串
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Common.DictionaryItem">
            <summary>
            字典项
            </summary>
        </member>
        <member name="T:Basic.Framework.Common.DictionaryCache">
            <summary>
            内存模式字典工具
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.DictionaryCache.Add(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            添加字典
            </summary>
            <param name="code"></param>
            <param name="dicts"></param>
        </member>
        <member name="M:Basic.Framework.Common.DictionaryCache.GetDicts(System.String)">
            <summary>
            获取字典
            </summary>
            <param name="categoryCode"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.DictionaryCache.GetDictValue(System.String,System.String)">
            <summary>
            根据字典分类编码和值获取对应名称
            </summary>
            <param name="code"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.DictionaryCache.GetAllValuesByCode(System.String)">
            <summary>
            根据字典编码获取所有字典项
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.DictionaryCache.Clear">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="T:Basic.Framework.Common.DocumentConvert">
            <summary>
            文档转换类
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.DocumentConvert.WrodToPdf(System.String,System.String)">
            <summary>
            word转pdf
            </summary>
            <param name="filePath"></param>
            <param name="fileFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.DocumentConvert.PPtToPdf(System.String,System.String)">
            <summary>
            ppt转pdf
            </summary>
            <param name="filePath"></param>
            <param name="fileFullName"></param>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Common.EmailHelper">
            <summary>
            email发送辅助类 参数配置 可通过配置文件配置 
            </summary>
        </member>
        <member name="F:Basic.Framework.Common.EmailHelper._userName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.EmailHelper.SendEmail(System.String,System.String,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            发送邮件  暂时没有发送附件 需要 需要再加
            </summary>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <param name="to">发送邮箱列表</param>
            <param name="IsBodyHtml">是否支持html显示</param>
            <returns></returns>
        </member>
        <member name="P:Basic.Framework.Common.EmailHelper.UserName">
            <summary>
            邮箱名称
            </summary>
        </member>
        <member name="P:Basic.Framework.Common.EmailHelper.Password">
            <summary>
            邮箱密码
            </summary>
        </member>
        <member name="P:Basic.Framework.Common.EmailHelper.SmtpServer">
            <summary>
            smtp服务器地址
            </summary>
        </member>
        <member name="P:Basic.Framework.Common.EmailHelper.Port">
            <summary>
            邮箱服务器端口号
            </summary>
        </member>
        <member name="T:Basic.Framework.Common.FTPHelper">
            <summary>
            FTP处理操作类
            功能：
            下载文件
            上传文件
            上传文件的进度信息
            下载文件的进度信息
            删除文件
            列出文件
            列出目录
            进入子目录
            退出当前目录返回上一层目录
            判断远程文件是否存在
            判断远程文件是否存在
            删除远程文件    
            建立目录
            删除目录
            文件（目录）改名
            </summary>
        </member>
        <member name="F:Basic.Framework.Common.FTPHelper.Request">
            <summary>
            FTP请求对象
            </summary>
        </member>
        <member name="F:Basic.Framework.Common.FTPHelper.Response">
            <summary>
            FTP响应对象
            </summary>
        </member>
        <member name="F:Basic.Framework.Common.FTPHelper._Uri">
            <summary>
            FTP服务器地址
            </summary>
        </member>
        <member name="F:Basic.Framework.Common.FTPHelper._DirectoryPath">
            <summary>
            当前工作目录
            </summary>
        </member>
        <member name="F:Basic.Framework.Common.FTPHelper._UserName">
            <summary>
            FTP登录用户
            </summary>
        </member>
        <member name="F:Basic.Framework.Common.FTPHelper._ErrorMsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="F:Basic.Framework.Common.FTPHelper._Password">
            <summary>
            FTP登录密码
            </summary>
        </member>
        <member name="F:Basic.Framework.Common.FTPHelper._Proxy">
            <summary>
            连接FTP服务器的代理服务
            </summary>
        </member>
        <member name="F:Basic.Framework.Common.FTPHelper._isDeleteTempFile">
            <summary>
            是否需要删除临时文件
            </summary>
        </member>
        <member name="F:Basic.Framework.Common.FTPHelper._UploadTempFile">
            <summary>
            异步上传所临时生成的文件
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.#ctor(System.Uri,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="FtpUri">FTP地址</param>
            <param name="strUserName">登录用户名</param>
            <param name="strPassword">登录密码</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.#ctor(System.Uri,System.String,System.String,System.Net.WebProxy)">
            <summary>
            构造函数
            </summary>
            <param name="FtpUri">FTP地址</param>
            <param name="strUserName">登录用户名</param>
            <param name="strPassword">登录密码</param>
            <param name="objProxy">连接代理</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.Open(System.Uri,System.String)">
            <summary>
            建立FTP链接,返回响应对象
            </summary>
            <param name="uri">FTP地址</param>
            <param name="FtpMethod">操作命令</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.OpenRequest(System.Uri,System.String)">
            <summary>
            建立FTP链接,返回请求对象
            </summary>
            <param name="uri">FTP地址</param>
            <param name="FtpMethod">操作命令</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.DownloadFile(System.String,System.String)">
            <summary>
            从FTP服务器下载文件，使用与远程文件同名的文件名来保存文件
            </summary>
            <param name="RemoteFileName">远程文件名</param>
            <param name="LocalPath">本地路径</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.DownloadFile(System.String,System.String,System.String)">
            <summary>
            从FTP服务器下载文件，指定本地路径和本地文件名
            </summary>
            <param name="RemoteFileName">远程文件名</param>
            <param name="LocalPath">本地路径</param>
            <param name="LocalFilePath">保存文件的本地路径,后面带有"\"</param>
            <param name="LocalFileName">保存本地的文件名</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.DownloadFile(System.String)">
            <summary>
            从FTP服务器下载文件，返回文件二进制数据
            </summary>
            <param name="RemoteFileName">远程文件名</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.DownloadFileAsync(System.String,System.String,System.String)">
            <summary>
            从FTP服务器异步下载文件，指定本地路径和本地文件名
            </summary>
            <param name="RemoteFileName">远程文件名</param>        
            <param name="LocalPath">保存文件的本地路径,后面带有"\"</param>
            <param name="LocalFileName">保存本地的文件名</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.DownloadFileAsync(System.String,System.String)">
            <summary>
            从FTP服务器异步下载文件，指定本地完整路径文件名
            </summary>
            <param name="RemoteFileName">远程文件名</param>
            <param name="LocalFullPath">本地完整路径文件名</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.client_DownloadFileCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            异步下载文件完成之后触发的事件
            </summary>
            <param name="sender">下载对象</param>
            <param name="e">数据信息对象</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.client_DownloadProgressChanged(System.Object,System.Net.DownloadProgressChangedEventArgs)">
            <summary>
            异步下载进度发生改变触发的事件
            </summary>
            <param name="sender">下载对象</param>
            <param name="e">进度信息对象</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.UploadFile(System.String)">
            <summary>
            上传文件到FTP服务器
            </summary>
            <param name="LocalFullPath">本地带有完整路径的文件名</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.UploadFile(System.String,System.Boolean)">
            <summary>
            上传文件到FTP服务器
            </summary>
            <param name="LocalFullPath">本地带有完整路径的文件</param>
            <param name="OverWriteRemoteFile">是否覆盖远程服务器上面同名的文件</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.UploadFile(System.String,System.String)">
            <summary>
            上传文件到FTP服务器
            </summary>
            <param name="LocalFullPath">本地带有完整路径的文件</param>
            <param name="RemoteFileName">要在FTP服务器上面保存文件名</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.UploadFile(System.String,System.String,System.Boolean)">
            <summary>
            上传文件到FTP服务器
            </summary>
            <param name="LocalFullPath">本地带有完整路径的文件名</param>
            <param name="RemoteFileName">要在FTP服务器上面保存文件名</param>
            <param name="OverWriteRemoteFile">是否覆盖远程服务器上面同名的文件</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.UploadFile(System.Byte[],System.String)">
            <summary>
            上传文件到FTP服务器
            </summary>
            <param name="FileBytes">上传的二进制数据</param>
            <param name="RemoteFileName">要在FTP服务器上面保存文件名</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.UploadFile(System.Byte[],System.String,System.Boolean)">
            <summary>
            上传文件到FTP服务器
            </summary>
            <param name="FileBytes">文件二进制内容</param>
            <param name="RemoteFileName">要在FTP服务器上面保存文件名</param>
            <param name="OverWriteRemoteFile">是否覆盖远程服务器上面同名的文件</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.UploadFileAsync(System.String)">
            <summary>
            异步上传文件到FTP服务器
            </summary>
            <param name="LocalFullPath">本地带有完整路径的文件名</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.UploadFileAsync(System.String,System.Boolean)">
            <summary>
            异步上传文件到FTP服务器
            </summary>
            <param name="LocalFullPath">本地带有完整路径的文件</param>
            <param name="OverWriteRemoteFile">是否覆盖远程服务器上面同名的文件</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.UploadFileAsync(System.String,System.String)">
            <summary>
            异步上传文件到FTP服务器
            </summary>
            <param name="LocalFullPath">本地带有完整路径的文件</param>
            <param name="RemoteFileName">要在FTP服务器上面保存文件名</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.UploadFileAsync(System.String,System.String,System.Boolean)">
            <summary>
            异步上传文件到FTP服务器
            </summary>
            <param name="LocalFullPath">本地带有完整路径的文件名</param>
            <param name="RemoteFileName">要在FTP服务器上面保存文件名</param>
            <param name="OverWriteRemoteFile">是否覆盖远程服务器上面同名的文件</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.UploadFileAsync(System.Byte[],System.String)">
            <summary>
            异步上传文件到FTP服务器
            </summary>
            <param name="FileBytes">上传的二进制数据</param>
            <param name="RemoteFileName">要在FTP服务器上面保存文件名</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.UploadFileAsync(System.Byte[],System.String,System.Boolean)">
            <summary>
            异步上传文件到FTP服务器
            </summary>
            <param name="FileBytes">文件二进制内容</param>
            <param name="RemoteFileName">要在FTP服务器上面保存文件名</param>
            <param name="OverWriteRemoteFile">是否覆盖远程服务器上面同名的文件</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.client_UploadFileCompleted(System.Object,System.Net.UploadFileCompletedEventArgs)">
            <summary>
            异步上传文件完成之后触发的事件
            </summary>
            <param name="sender">下载对象</param>
            <param name="e">数据信息对象</param>
        </member>
        <!-- 对于成员“M:Basic.Framework.Common.FTPHelper.client_UploadProgressChanged(System.Object,System.Net.UploadProgressChangedEventArgs)”忽略有格式错误的 XML 注释 -->
        <member name="M:Basic.Framework.Common.FTPHelper.ListFilesAndDirectories">
            <summary>
            列出FTP服务器上面当前目录的所有文件和目录
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.ListFiles">
            <summary>
            列出FTP服务器上面当前目录的所有文件
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.ListDirectories">
            <summary>
            列出FTP服务器上面当前目录的所有的目录
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.GetList(System.String)">
            <summary>
            获得文件和目录列表
            </summary>
            <param name="datastring">FTP返回的列表字符信息</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.ParseFileStructFromWindowsStyleRecord(System.String)">
            <summary>
            从Windows格式中返回文件信息
            </summary>
            <param name="Record">文件信息</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.GuessFileListStyle(System.String[])">
            <summary>
            判断文件列表的方式Window方式还是Unix方式
            </summary>
            <param name="recordList">文件信息列表</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.ParseFileStructFromUnixStyleRecord(System.String)">
            <summary>
            从Unix格式中返回文件信息
            </summary>
            <param name="Record">文件信息</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper._cutSubstringFromStringWithTrim(System.String@,System.Char,System.Int32)">
            <summary>
            按照一定的规则进行字符串截取
            </summary>
            <param name="s">截取的字符串</param>
            <param name="c">查找的字符</param>
            <param name="startIndex">查找的位置</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.DirectoryExist(System.String)">
            <summary>
            判断当前目录下指定的子目录是否存在
            </summary>
            <param name="RemoteDirectoryName">指定的目录名</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.FileExist(System.String)">
            <summary>
            判断一个远程文件是否存在服务器当前目录下面
            </summary>
            <param name="RemoteFileName">远程文件名</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.DeleteFile(System.String)">
            <summary>
            从FTP服务器上面删除一个文件
            </summary>
            <param name="RemoteFileName">远程文件名</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.ReName(System.String,System.String)">
            <summary>
            更改一个文件的名称或一个目录的名称
            </summary>
            <param name="RemoteFileName">原始文件或目录名称</param>
            <param name="NewFileName">新的文件或目录的名称</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.CopyFileToAnotherDirectory(System.String,System.String)">
            <summary>
            把当前目录下面的一个文件拷贝到服务器上面另外的目录中，注意，拷贝文件之后，当前工作目录还是文件原来所在的目录
            </summary>
            <param name="RemoteFile">当前目录下的文件名</param>
            <param name="DirectoryName">新目录名称。
            说明：如果新目录是当前目录的子目录，则直接指定子目录。如: SubDirectory1/SubDirectory2 ；
            如果新目录不是当前目录的子目录，则必须从根目录一级一级的指定。如： ./NewDirectory/SubDirectory1/SubDirectory2
            </param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Basic.Framework.Common.FTPHelper.MoveFileToAnotherDirectory(System.String,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:Basic.Framework.Common.FTPHelper.MakeDirectory(System.String)">
            <summary>
            在FTP服务器上当前工作目录建立一个子目录
            </summary>
            <param name="DirectoryName">子目录名称</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.RemoveDirectory(System.String)">
            <summary>
            从当前工作目录中删除一个子目录
            </summary>
            <param name="DirectoryName">子目录名称</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.IsValidPathChars(System.String)">
            <summary>
            判断目录名中字符是否合法
            </summary>
            <param name="DirectoryName">目录名称</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.IsValidFileChars(System.String)">
            <summary>
            判断文件名中字符是否合法
            </summary>
            <param name="FileName">文件名称</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.GotoDirectory(System.String)">
            <summary>
            进入一个目录
            </summary>
            <param name="DirectoryName">
            新目录的名字。 
            说明：如果新目录是当前目录的子目录，则直接指定子目录。如: SubDirectory1/SubDirectory2 ； 
            如果新目录不是当前目录的子目录，则必须从根目录一级一级的指定。如： ./NewDirectory/SubDirectory1/SubDirectory2
            </param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.EnterOneSubDirectory(System.String)">
            <summary>
            从当前工作目录进入一个子目录
            </summary>
            <param name="DirectoryName">子目录名称</param>
        </member>
        <member name="M:Basic.Framework.Common.FTPHelper.ComeoutDirectory">
            <summary>
            从当前工作目录往上一级目录
            </summary>
        </member>
        <member name="P:Basic.Framework.Common.FTPHelper.Uri">
            <summary>
            FTP服务器地址
            </summary>
        </member>
        <member name="P:Basic.Framework.Common.FTPHelper.DirectoryPath">
            <summary>
            当前工作目录
            </summary>
        </member>
        <member name="P:Basic.Framework.Common.FTPHelper.UserName">
            <summary>
            FTP登录用户
            </summary>
        </member>
        <member name="P:Basic.Framework.Common.FTPHelper.ErrorMsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Basic.Framework.Common.FTPHelper.Password">
            <summary>
            FTP登录密码
            </summary>
        </member>
        <member name="P:Basic.Framework.Common.FTPHelper.Proxy">
            <summary>
            连接FTP服务器的代理服务
            </summary>
        </member>
        <member name="E:Basic.Framework.Common.FTPHelper.DownloadProgressChanged">
            <summary>
            异步下载进度发生改变触发的事件
            </summary>
        </member>
        <member name="E:Basic.Framework.Common.FTPHelper.DownloadDataCompleted">
            <summary>
            异步下载文件完成之后触发的事件
            </summary>
        </member>
        <member name="E:Basic.Framework.Common.FTPHelper.UploadProgressChanged">
            <summary>
            异步上传进度发生改变触发的事件
            </summary>
        </member>
        <member name="E:Basic.Framework.Common.FTPHelper.UploadFileCompleted">
            <summary>
            异步上传文件完成之后触发的事件
            </summary>
        </member>
        <member name="T:Basic.Framework.Common.HardwareHelper">
            <summary>
            获取硬件信息类
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.HardwareHelper.GetCPUSerialNumber">
            <summary>
            获取CUP序列号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.HardwareHelper.GetHardDiskSerialNumber">
            <summary>
            获取第一块硬盘号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.HardwareHelper.GetNetworkAdapterSerialNumber">
            <summary>
            取第一块网卡号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.HardwareHelper.GetMotherBoardSerialNumber">
            <summary>
            读主板序列号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.HardwareHelper.GetIPAddress">
            <summary>
            获取本机IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.HardwareHelper.GetHostName">
            <summary>
            获取本机机器名称
            </summary>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Common.IdHelper">
            <summary>
            Id生成辅助类
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.IdHelper.CreateGuidId">
            <summary>
            创建Guid类型 Id
            </summary>
            <returns>返回Id(小写的36位字符串）</returns>
        </member>
        <member name="M:Basic.Framework.Common.IdHelper.CreateLongId">
            <summary>
            创建长整型Id
            </summary>
            <returns>返回Id(Long类型)</returns>
        </member>
        <member name="T:Basic.Framework.Common.IgnoreURLs">
            <summary>
            忽略权限检查功能辅助工具
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.IgnoreURLs.Clear">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.IgnoreURLs.Load(System.String)">
            <summary>
            加载数据
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Basic.Framework.Common.IgnoreURLs.Reload(System.String[])">
            <summary>
            重新加载
            </summary>
            <param name="paths"></param>
        </member>
        <member name="M:Basic.Framework.Common.IgnoreURLs.IsIgnore(System.String)">
            <summary>
            是否是忽略项
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Common.IniConfigHelper">
            <summary>
            ini文件操作管理类
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.IniConfigHelper.GetPrivateProfileSectionNames(System.IntPtr,System.UInt32,System.String)">
            <summary>
            获取所有节点名称(Section)
            </summary>
            <param name="lpszReturnBuffer">存放节点名称的内存地址,每个节点之间用\0分隔</param>
            <param name="nSize">内存大小(characters)</param>
            <param name="lpFileName">Ini文件</param>
            <returns>内容的实际长度,为0表示没有内容,为nSize-2表示内存大小不够</returns>
        </member>
        <member name="M:Basic.Framework.Common.IniConfigHelper.GetPrivateProfileSection(System.String,System.IntPtr,System.UInt32,System.String)">
            <summary>
            获取某个指定节点(Section)中所有KEY和Value
            </summary>
            <param name="lpAppName">节点名称</param>
            <param name="lpReturnedString">返回值的内存地址,每个之间用\0分隔</param>
            <param name="nSize">内存大小(characters)</param>
            <param name="lpFileName">Ini文件</param>
            <returns>内容的实际长度,为0表示没有内容,为nSize-2表示内存大小不够</returns>
        </member>
        <member name="M:Basic.Framework.Common.IniConfigHelper.GetPrivateProfileString(System.String,System.String,System.String,System.Char[],System.UInt32,System.String)">
            <summary>
            读取INI文件中指定的Key的值
            </summary>
            <param name="lpAppName">节点名称。如果为null,则读取INI中所有节点名称,每个节点名称之间用\0分隔</param>
            <param name="lpKeyName">Key名称。如果为null,则读取INI中指定节点中的所有KEY,每个KEY之间用\0分隔</param>
            <param name="lpDefault">读取失败时的默认值</param>
            <param name="lpReturnedString">读取的内容缓冲区，读取之后，多余的地方使用\0填充</param>
            <param name="nSize">内容缓冲区的长度</param>
            <param name="lpFileName">INI文件名</param>
            <returns>实际读取到的长度</returns>
        </member>
        <member name="M:Basic.Framework.Common.IniConfigHelper.WritePrivateProfileSection(System.String,System.String,System.String)">
            <summary>
            将指定的键值对写到指定的节点，如果已经存在则替换。
            </summary>
            <param name="lpAppName">节点，如果不存在此节点，则创建此节点</param>
            <param name="lpString">Item键值对，多个用\0分隔,形如key1=value1\0key2=value2
            <para>如果为string.Empty，则删除指定节点下的所有内容，保留节点</para>
            <para>如果为null，则删除指定节点下的所有内容，并且删除该节点</para>
            </param>
            <param name="lpFileName">INI文件</param>
            <returns>是否成功写入</returns>
        </member>
        <member name="M:Basic.Framework.Common.IniConfigHelper.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            将指定的键和值写到指定的节点，如果已经存在则替换
            </summary>
            <param name="lpAppName">节点名称</param>
            <param name="lpKeyName">键名称。如果为null，则删除指定的节点及其所有的项目</param>
            <param name="lpString">值内容。如果为null，则删除指定节点中指定的键。</param>
            <param name="lpFileName">INI文件</param>
            <returns>操作是否成功</returns>
        </member>
        <member name="M:Basic.Framework.Common.IniConfigHelper.INIGetAllSectionNames(System.String)">
            <summary>
            读取INI文件中指定INI文件中的所有节点名称(Section)
            </summary>
            <param name="iniFile">Ini文件</param>
            <returns>所有节点,没有内容返回string[0]</returns>
        </member>
        <member name="M:Basic.Framework.Common.IniConfigHelper.INIGetAllItems(System.String,System.String)">
            <summary>
            获取INI文件中指定节点(Section)中的所有条目(key=value形式)
            </summary>
            <param name="iniFile">Ini文件</param>
            <param name="section">节点名称</param>
            <returns>指定节点中的所有项目,没有内容返回string[0]</returns>
        </member>
        <member name="M:Basic.Framework.Common.IniConfigHelper.INIGetAllItemKeys(System.String,System.String)">
            <summary>
            获取INI文件中指定节点(Section)中的所有条目的Key列表
            </summary>
            <param name="iniFile">Ini文件</param>
            <param name="section">节点名称</param>
            <returns>如果没有内容,反回string[0]</returns>
        </member>
        <member name="M:Basic.Framework.Common.IniConfigHelper.INIGetStringValue(System.String,System.String,System.String,System.String)">
            <summary>
            读取INI文件中指定KEY的字符串型值
            </summary>
            <param name="iniFile">Ini文件</param>
            <param name="section">节点名称</param>
            <param name="key">键名称</param>
            <param name="defaultValue">如果没此KEY所使用的默认值</param>
            <returns>读取到的值</returns>
        </member>
        <member name="M:Basic.Framework.Common.IniConfigHelper.INIWriteItems(System.String,System.String,System.String)">
            <summary>
            在INI文件中，将指定的键值对写到指定的节点，如果已经存在则替换
            </summary>
            <param name="iniFile">INI文件</param>
            <param name="section">节点，如果不存在此节点，则创建此节点</param>
            <param name="items">键值对，多个用\0分隔,形如key1=value1\0key2=value2</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.IniConfigHelper.INIWriteValue(System.String,System.String,System.String,System.String)">
            <summary>
            在INI文件中，指定节点写入指定的键及值。如果已经存在，则替换。如果没有则创建。
            </summary>
            <param name="iniFile">INI文件</param>
            <param name="section">节点</param>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>操作是否成功</returns>
        </member>
        <member name="M:Basic.Framework.Common.IniConfigHelper.INIDeleteKey(System.String,System.String,System.String)">
            <summary>
            在INI文件中，删除指定节点中的指定的键。
            </summary>
            <param name="iniFile">INI文件</param>
            <param name="section">节点</param>
            <param name="key">键</param>
            <returns>操作是否成功</returns>
        </member>
        <member name="M:Basic.Framework.Common.IniConfigHelper.INIDeleteSection(System.String,System.String)">
            <summary>
            在INI文件中，删除指定的节点。
            </summary>
            <param name="iniFile">INI文件</param>
            <param name="section">节点</param>
            <returns>操作是否成功</returns>
        </member>
        <member name="M:Basic.Framework.Common.IniConfigHelper.INIEmptySection(System.String,System.String)">
            <summary>
            在INI文件中，删除指定节点中的所有内容。
            </summary>
            <param name="iniFile">INI文件</param>
            <param name="section">节点</param>
            <returns>操作是否成功</returns>
        </member>
        <member name="T:Basic.Framework.Common.JSONHelper">
            <summary>
                作者：罗春虎
            创建时间：2016-7-28
            功能描述：JSON格式转换辅助类
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.JSONHelper.ToJSONString(System.Object)">
            <summary>
            把.net对象转为json格式字符串
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.JSONHelper.ParseJSONString``1(System.String)">
            <summary>
            把json格式字符串转为.net对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Common.MD5Helper">
            <summary>
            md5辅助类
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.MD5Helper.MD5Encrypt(System.String)">
            <summary>
            加密字符串获取md5值
            </summary>
            <param name="originString"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.MD5Helper.CompareMD5(System.String,System.String)">
            <summary>
            判断md5值是否相等
            </summary>
            <param name="originString"></param>
            <param name="encryptString"></param>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Common.ObjectConverter">
            <summary>
                作者：罗春虎
            创建时间：2016-7-28
            功能描述：对象类型转换辅助类
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.ObjectConverter.Copy``2(``0)">
            <summary>
            类型转换
            </summary>
            <typeparam name="F"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.ObjectConverter.CopyList``2(System.Collections.Generic.IList{``0})">
            <summary>
            列表类型转换
            </summary>
            <typeparam name="F"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.ObjectConverter.Copy2``2(``0)">
            <summary>
            属性反射复制
            </summary>
            <typeparam name="F"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.ObjectConverter.Copy``1(System.Data.DataTable)">
            <summary>
            数据复制
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.ObjectConverter.ToDataTable``1(System.Collections.Generic.IList{``0})">
            <summary>
            将值对象列表转换为DataTable
            如果list为空,则返回空
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.ObjectConverter.ToDataTable(System.Collections.IList)">
            <summary>
            将IList转换为DataTable
            </summary>
            <param name="vos"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.ObjectConverter.ToDataTableFromOne(System.Collections.IList)">
            <summary>
            将单实体值对象列表转换为DataTable
            如果vos为空,则返回空
            </summary>
            <param name="vos"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.ObjectConverter.ToDataTableFromMore(System.Collections.IList[])">
            <summary>
            将多实体值对象列表转换为DataTable
            如果vos为空,则返回空
            </summary>
            <param name="vos"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.ObjectConverter.ToDataTable(System.Data.IDataReader)">
            <summary>
            DataReader类型转换为DataTable类型
            注意,该方法内未关闭DataReader,请调用处自行关闭
            </summary>
            <param name="dataReader">DataReader</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Basic.Framework.Common.ObjectConverter.ToBase64String(System.Object)">
            <summary>
            对象转base64string
            </summary>
            <param name="obj">转换的对象</param>
            <returns>对象转base64string</returns>
        </member>
        <member name="M:Basic.Framework.Common.ObjectConverter.FromBase64String``1(System.String)">
            <summary>
            base64string转对象
            </summary>
            <typeparam name="T">转换后的数据类型</typeparam>
            <param name="base64String">base64string</param>
            <returns>转换后的对象</returns>
        </member>
        <member name="M:Basic.Framework.Common.ObjectConverter.DeepCopy``1(``0)">
            <summary>
            对象深拷贝
            </summary>
            <typeparam name="T">对象数据类型</typeparam>
            <param name="source">原始数据对象</param>
            <returns>新复制的数据</returns>
        </member>
        <member name="T:Basic.Framework.Common.StringUtil">
            <summary>
            字符串类型转换辅助工具
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.StringUtil.IsEmpty(System.String)">
            <summary>
            是否为空
            </summary>
            <param name="testString"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.StringUtil.IsNotEmpty(System.String)">
            <summary>
            是否不为空
            </summary>
            <param name="testString"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.StringUtil.SafeParseInt(System.Object,System.Int32)">
            <summary>
            转换成整数
            </summary>
            <param name="o"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.StringUtil.SafeParseFloat(System.Object,System.Single)">
            <summary>
            转换成浮点数
            </summary>
            <param name="o"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.StringUtil.SafeParseDouble(System.Object,System.Double)">
            <summary>
            转换成双浮点数
            </summary>
            <param name="o"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.StringUtil.SafeParseDecimal(System.Object,System.Decimal)">
            <summary>
            转换成货币格式
            </summary>
            <param name="o"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.StringUtil.SafeParseString(System.Object,System.String)">
            <summary>
            转换成字符串
            </summary>
            <param name="o"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.StringUtil.SafeParseDate(System.Object,System.DateTime)">
            <summary>
            转换成日期格式
            </summary>
            <param name="o"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Common.TypeConvert">
            <summary>
            类型转换工具类
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.TypeConvert.ToString(System.Object)">
            <summary>
            转换为字符串
            如果转换出错,则返回零长度串
            </summary>
            <param name="objValue"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.TypeConvert.ToDouble(System.Object)">
            <summary>
            转换为双精度数字
            如果转换出错,则返回0
            </summary>
            <param name="objValue"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.TypeConvert.ToDecimal(System.Object)">
            <summary>
            转换为十进制数字
            如果转换出错,则返回0
            </summary>
            <param name="objValue"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.TypeConvert.ToAmount(System.Object)">
            <summary>
            转换为金额
            如果多于2位小数位,则采用四舍五入方式收为两位小数
            </summary>
            <param name="objValue"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.TypeConvert.ToInt(System.Object)">
            <summary>
            转换为整数
            如果转换出错,则返回0
            </summary>
            <param name="objValue"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.TypeConvert.ToByte(System.Object)">
            <summary>
            转换为8位无符号整数
            如果转换出错,则返回0
            </summary>
            <param name="objValue"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.TypeConvert.ToDateTime(System.Object)">
            <summary>
            转换为时间类型
            如果转换出错,则返回当时的机器时间
            </summary>
            <param name="objValue"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.TypeConvert.ToBool(System.Object)">
            <summary>
            转换为布尔类型
            如果转换出错,则返回false
            </summary>
            <param name="objValue"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.TypeConvert.isNumericType(System.String)">
            <summary>
            是否是数字类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.TypeConvert.ToRefType(System.Object,System.Type)">
            <summary>
            转换为指定类型的数据
            </summary>
            <param name="objValue"></param>
            <param name="toType"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.TypeConvert.IsValidLevelCode(System.String)">
            <summary>
            检查级次编码合法性
            编码名为A-Z,a-z,0-9和下画线( _ )，位置和长度不限
            减号为级次编码的分隔线 
            </summary>
            <param name="strText"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.TypeConvert.IsValidCode(System.String)">
            <summary>
            检查非级次编码合法性
            编码名为A-Z,a-z,0-9和下画线( _ )，位置和长度不限
            </summary>
            <param name="strText"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.TypeConvert.ToRMB(System.Double)">
            <summary>
            转换金额为人民币大写
            </summary>
            <param name="n">Int64 金额</param>
            <returns>人民币大写</returns>        
        </member>
        <member name="M:Basic.Framework.Common.TypeConvert.BytesToDateTime(System.Byte[])">
            <summary> 
            将BYTE数组转换为DATETIME类型 
            </summary> 
            <param name="bytes"></param> 
            <returns></returns> 
        </member>
        <member name="M:Basic.Framework.Common.TypeConvert.DateTimeToBytes(System.DateTime)">
            <summary>
            将日期转换成byte数组
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Common.ValidationHelper">
            <summary>
            C#类型验证
            </summary>
        </member>
        <member name="F:Basic.Framework.Common.ValidationHelper.RegNumber">
            <summary>  
            纯数字，无正负号  
            </summary>  
        </member>
        <member name="F:Basic.Framework.Common.ValidationHelper.RegNumberSign">
            <summary>  
            纯数字，可能有正负号  
            </summary>  
        </member>
        <member name="F:Basic.Framework.Common.ValidationHelper.RegDecimal">
            <summary>  
            可能有有小数点的数字  
            </summary>  
        </member>
        <member name="F:Basic.Framework.Common.ValidationHelper.RegDecimalSign">
            <summary>  
            可能有小数点，也有可能有正负号的数字  
            </summary>  
        </member>
        <member name="F:Basic.Framework.Common.ValidationHelper.RegEmail">
            <summary>  
            Email地址  
            </summary>  
        </member>
        <member name="F:Basic.Framework.Common.ValidationHelper.RegCHZN">
            <summary>  
            是否有中文  
            </summary>  
        </member>
        <member name="F:Basic.Framework.Common.ValidationHelper.RegInt">
            <summary>  
            是否为int数据  
            </summary>  
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.IsRightIP(System.String)">
            <summary>
            判断IP地址是否有效
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.IsValidEmail(System.String)">
            <summary>
            验证Email地址
            </summary>
            <param name="strIn"></param>
            <returns></returns> 
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.MDYToDMY(System.String)">
            <summary>
            dd-mm-yy 的日期形式代替 mm/dd/yy 的日期形式。
            </summary>
            <param name="input"></param>
            <returns></returns> 
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.IsValidDecimal(System.String)">
            <summary>
            验证是否为小数 
            </summary>
            <param name="strIn"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.IsValidTel(System.String)">
            <summary>
            验证是否为电话号码
            </summary>
            <param name="strIn"></param>
            <returns></returns> 
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.IsValidDate(System.String)">
            <summary>
            验证年月日
            </summary>
            <param name="strIn"></param>
            <returns></returns> 
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.IsValidPostfix(System.String)">
            <summary>
            验证后缀名
            </summary>
            <param name="strIn"></param>
            <returns></returns> 
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.IsValidByte(System.String,System.Int32,System.Int32)">
            <summary>
            验证字符是否在X至X之间
            </summary>
            <param name="strIn"></param>
            <returns></returns> 
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.IsPhone(System.String)">
            <summary>  
            是否是中国的电话号码  
            </summary>  
            <param name="inputData">输入的字符串</param>  
            <returns></returns>  
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.GetRequest(System.Web.HttpRequest,System.String)">
            <summary>  
            获取Request请求字符串的键值  
            </summary>  
            <param name="req">Request</param>  
            <param name="inputKey">Request的键值</param>  
            <returns>返回Request请求字符串</returns>  
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.IsNumber(System.String)">
            <summary>  
            是否数字字符串  
            </summary>  
            <param name="inputData">输入字符串</param>  
            <returns></returns>  
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.IsNumberSign(System.String)">
            <summary>  
            是否数字字符串 可带正负号  
            </summary>  
            <param name="inputData">输入字符串</param>  
            <returns></returns>  
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.IsDecimal(System.String)">
            <summary>  
            是否是浮点数  
            </summary>  
            <param name="inputData">输入字符串</param>  
            <returns></returns>  
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.IsDecimalSign(System.String)">
            <summary>  
            是否是浮点数 可带正负号  
            </summary>  
            <param name="inputData">输入字符串</param>  
            <returns></returns>    
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.IsHasCHZN(System.String)">
            <summary>  
            检测是否有中文字符  
            </summary>  
            <param name="inputData"></param>  
            <returns></returns>  
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.IsEmail(System.String)">
            <summary>  
            是否是邮件地址  
            </summary>  
            <param name="inputData">输入字符串</param>  
            <returns></returns>  
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.HtmlEncode(System.String)">
            <summary>  
            字符串编码HtmlEncode  
            </summary>  
            <param name="inputData"></param>  
            <returns></returns>  
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.SetLabel(System.Web.UI.WebControls.Label,System.String)">
            <summary>  
            设置Label显示Encode的字符串  
            </summary>  
            <param name="lbl"></param>  
            <param name="txtInput"></param>  
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.ClearText(System.String,System.Int32)">
            <summary>  
            字符串清理  
            </summary>  
            <param name="inputString">输入的字符串</param>  
            <param name="maxLength">保留的长度</param>  
            <returns></returns>  
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.Encode(System.String)">
            <summary>  
            转换成 HTML code  
            </summary>  
            <param name="str">string</param>  
            <returns>string</returns>  
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.Decode(System.String)">
             <summary>  
            解析html成 普通文本  
             </summary>  
             <param name="str">string</param>  
             <returns>string</returns>  
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.SqlTextClear(System.String)">
            <summary>  
            清理字符串  
            </summary>  
            <param name="sqlText"></param>  
            <returns></returns>  
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.isContainSameChar(System.String)">
            <summary>  
            是否由特定字符组成  
            </summary>  
            <param name="strInput">要检测的字符串</param>  
            <returns></returns>  
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.isContainSameChar(System.String,System.String)">
            <summary>  
            是否由特定字符组成2  
            </summary>  
            <param name="strInput">要检测的字符串</param>  
            <param name="charInput">是否包含的字符</param>  
            <returns></returns>  
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.isContainSpecChar(System.String)">
            <summary>  
            检查输入的是不是某些定义好的字符：用于密码输入的安全检查  
            </summary>  
            <param name="strInput">要检测的字符串</param>  
            <returns></returns>  
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.IsInt(System.String)">
            <summary>  
            是不是int范围数据  
            </summary>  
            <param name="inputData"></param>  
            <returns></returns>  
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.IsPostCode(System.String)">
            <summary>  
            是否是邮编号码  
            </summary>  
            <param name="inputData"></param>  
            <returns></returns>  
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.IsNormalChar(System.String)">
            <summary>  
            是不是字母、数字、下划线的组合  
            </summary>  
            <param name="inputData"></param>  
            <returns></returns>  
        </member>
        <member name="M:Basic.Framework.Common.ValidationHelper.IsDataTime(System.String)">
            <summary>  
            是不是日期类型  
            </summary>  
            <param name="inputData"></param>  
            <returns></returns>  
        </member>
        <!-- 对于成员“T:Basic.Framework.Common.XExcel`1”忽略有格式错误的 XML 注释 -->
        <member name="M:Basic.Framework.Common.XExcel`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.XExcel`1.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:Basic.Framework.Common.XExcel`1.#ctor(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.Int32,System.Func{`0,System.String}})">
            <summary>
            构造函数
            </summary>
            <param name="path">文件路径</param>
            <param name="columns">列集合</param>
            <param name="readActions">读写转换对应格式</param>
        </member>
        <member name="M:Basic.Framework.Common.XExcel`1.#ctor(System.String,System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            构造函数
            </summary>
            <param name="path">文件路径</param>
            <param name="objectConfigs">读写配置项</param>
        </member>
        <member name="M:Basic.Framework.Common.XExcel`1.SetColumns(System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="columns"></param>
        </member>
        <member name="M:Basic.Framework.Common.XExcel`1.SetObjectConfigs(System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            
            </summary>
            <param name="objectConfigs"></param>
        </member>
        <member name="M:Basic.Framework.Common.XExcel`1.SetReadActions(System.Collections.Generic.Dictionary{System.Int32,System.Func{`0,System.String}})">
            <summary>
            
            </summary>
            <param name="readActions"></param>
        </member>
        <member name="M:Basic.Framework.Common.XExcel`1.SetPath(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Basic.Framework.Common.XExcel`1.ReadData(System.Boolean)">
            <summary>
            
            </summary>
            <param name="isReadFirstRow"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.XExcel`1.CopyValue(System.Collections.Generic.List{`0},NPOI.SS.UserModel.ISheet,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="sheet"></param>
            <param name="cellCount"></param>
            <param name="i"></param>
        </member>
        <member name="M:Basic.Framework.Common.XExcel`1.SetObjectValue(System.String,System.Object,`0)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="data"></param>
        </member>
        <member name="M:Basic.Framework.Common.XExcel`1.WriteData(System.Collections.Generic.List{`0})">
            <summary>
            写数据
            </summary>
            <param name="datas"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.XExcel`1.WriteData(NPOI.SS.UserModel.ISheet,System.Int32,System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="sheet"></param>
            <param name="cellCount"></param>
            <param name="rowIndex"></param>
            <param name="data"></param>
        </member>
        <member name="M:Basic.Framework.Common.XExcel`1.WriteHeader(NPOI.SS.UserModel.ISheet)">
            <summary>
            
            </summary>
            <param name="sheet"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.XExcel`1.WriteCellValue(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.XExcel`1.MergeExcel(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="rowStartIndex"></param>
            <param name="rowEndIndex"></param>
            <param name="cellSartIndex"></param>
            <param name="cellEndIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.XExcel`1.GetCellValue(NPOI.SS.UserModel.ICell)">
            <summary>
            根据Excel列类型获取列的值
            </summary>
            <param name="cell">Excel列</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.XExcel`1.AutoSizeColumns(NPOI.SS.UserModel.ISheet)">
            <summary>
            自动设置Excel列宽
            </summary>
            <param name="sheet">Excel表</param>
        </member>
        <member name="M:Basic.Framework.Common.XExcel`1.SaveToFile(System.IO.MemoryStream,System.String)">
            <summary>
            保存Excel文档流到文件
            </summary>
            <param name="ms">Excel文档流</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="T:Basic.Framework.Common.XMLHelper">
            <summary>
            XML文件操作管理类
            </summary>
        </member>
        <member name="M:Basic.Framework.Common.XMLHelper.CreateXmlDocument(System.String,System.String,System.String)">
            <summary>
            创建一个带有根节点的Xml文件
            </summary>
            <param name="FileName">Xml文件名称</param>
            <param name="rootName">根节点名称</param>
            <param name="Encode">编码方式:gb2312，UTF-8等常见的</param>
            <param name="DirPath">保存的目录路径</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Common.XMLHelper.InsertNode(System.String,System.String,System.Boolean,System.String,System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            插入一个节点和它的若干子节点
            </summary>
            <param name="XmlFile">Xml文件路径</param>
            <param name="NewNodeName">插入的节点名称</param>
            <param name="HasAttributes">此节点是否具有属性，True为有，False为无</param>
            <param name="fatherNode">此插入节点的父节点,要匹配的XPath表达式(例如:"//节点名//子节点名)</param>
            <param name="htAtt">此节点的属性，Key为属性名，Value为属性值</param>
            <param name="htSubNode">子节点的属性，Key为Name,Value为InnerText</param>
            <returns>返回真为更新成功，否则失败</returns>
        </member>
        <member name="M:Basic.Framework.Common.XMLHelper.UpdateNode(System.String,System.String,System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            更新节点
            </summary>
            <param name="XmlFile">Xml文件路径</param>
            <param name="fatherNode">需要更新节点的上级节点,要匹配的XPath表达式(例如:"//节点名//子节点名)</param>
            <param name="htAtt">需要更新的属性表，Key代表需要更新的属性，Value代表更新后的值</param>
            <param name="htSubNode">需要更新的子节点的属性表，Key代表需要更新的子节点名字Name,Value代表更新后的值InnerText</param>
            <returns>返回真为更新成功，否则失败</returns>
        </member>
        <member name="M:Basic.Framework.Common.XMLHelper.DeleteNodes(System.String,System.String)">
            <summary>
            删除指定节点下的子节点
            </summary>
            <param name="XmlFile">Xml文件路径</param>
            <param name="fatherNode">制定节点,要匹配的XPath表达式(例如:"//节点名//子节点名)</param>
            <returns>返回真为更新成功，否则失败</returns>
        </member>
        <member name="M:Basic.Framework.Common.XMLHelper.DeleteXmlNodeByXPath(System.String,System.String)">
            <summary>
            删除匹配XPath表达式的第一个节点(节点中的子元素同时会被删除)
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:Basic.Framework.Common.XMLHelper.DeleteXmlAttributeByXPath(System.String,System.String,System.String)">
            <summary>
            删除匹配XPath表达式的第一个节点中的匹配参数xmlAttributeName的属性
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlAttributeName">要删除的xmlAttributeName的属性名称</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:Basic.Framework.Common.XMLHelper.DeleteAllXmlAttributeByXPath(System.String,System.String)">
            <summary>
            删除匹配XPath表达式的第一个节点中的所有属性
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:Basic.Framework.Common.XMLHelper.SetAttributes(System.Xml.XmlElement,System.Collections.Hashtable)">
            <summary>
            设置节点属性
            </summary>
            <param name="xe">节点所处的Element</param>
            <param name="htAttribute">节点属性，Key代表属性名称，Value代表属性值</param>
        </member>
        <member name="M:Basic.Framework.Common.XMLHelper.SetNodes(System.String,System.Xml.XmlDocument,System.Xml.XmlElement,System.Collections.Hashtable)">
            <summary>
            增加子节点到根节点下
            </summary>
            <param name="rootNode">上级节点名称</param>
            <param name="XmlDoc">Xml文档</param>
            <param name="rootXe">父根节点所属的Element</param>
            <param name="SubNodes">子节点属性，Key为Name值，Value为InnerText值</param>
        </member>
        <member name="M:Basic.Framework.Common.XMLHelper.UpdateNodes(System.Xml.XmlNodeList,System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            更新节点属性和子节点InnerText值。柯 乐 义
            </summary>
            <param name="root">根节点名字</param>
            <param name="htAtt">需要更改的属性名称和值</param>
            <param name="htSubNode">需要更改InnerText的子节点名字和值</param>
        </member>
        <member name="M:Basic.Framework.Common.XMLHelper.GetXmlNodeByXpath(System.String,System.String)">
            
            <summary>
            选择匹配XPath表达式的第一个节点XmlNode.
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名")</param>
            <returns>返回XmlNode</returns>
        </member>
        <member name="M:Basic.Framework.Common.XMLHelper.GetXmlNodeListByXpath(System.String,System.String)">
            
            <summary>
            选择匹配XPath表达式的节点列表XmlNodeList.
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名")</param>
            <returns>返回XmlNodeList</returns>
        </member>
        <member name="M:Basic.Framework.Common.XMLHelper.GetXmlAttribute(System.String,System.String,System.String)">
            
            <summary>
            选择匹配XPath表达式的第一个节点的匹配xmlAttributeName的属性XmlAttribute. 柯乐义
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlAttributeName">要匹配xmlAttributeName的属性名称</param>
            <returns>返回xmlAttributeName</returns>
        </member>
        <member name="T:Basic.Framework.Configuration.ConfigChangeNotify">
            <summary>
                作者：罗春虎
            创建时间：2016-7-27
            功能描述：统一配置提供者接口
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.ConfigChangeNotify.AppName">
            <summary>
            应用名称
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.ConfigChangeNotify.Key">
            <summary>
            键值
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.ConfigChangeNotify.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.ConfigChangeNotify.NotifyType">
            <summary>
            通知类型
            </summary>
        </member>
        <member name="T:Basic.Framework.Configuration.NotifyType">
            <summary>
            通知类型
            </summary>
        </member>
        <member name="F:Basic.Framework.Configuration.NotifyType.Add">
            <summary>
            添加
            </summary>
        </member>
        <member name="F:Basic.Framework.Configuration.NotifyType.Update">
            <summary>
            更新
            </summary>
        </member>
        <member name="F:Basic.Framework.Configuration.NotifyType.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="T:Basic.Framework.Configuration.ConfigurationFileProvider">
            <summary>
                作者：罗春虎
            创建时间：2016-7-26
            功能描述：统一配置文件配置方式提供者
            </summary>
        </member>
        <member name="T:Basic.Framework.Configuration.IConfigurationProvider">
            <summary>
                作者：罗春虎
            创建时间：2016-7-26
            功能描述：统一配置提供者接口
            </summary>
        </member>
        <member name="M:Basic.Framework.Configuration.IConfigurationProvider.GetString(System.String,System.String)">
            <summary>
            获取字符串类型配置值
            </summary>
            <param name="key">配置键</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.IConfigurationProvider.GetInt(System.String,System.Int32)">
            <summary>
            获取整型类型配置值
            </summary>
            <param name="key">配置键</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.IConfigurationProvider.GetDateTime(System.String,System.DateTime)">
            <summary>
            获取日期类型配置值
            </summary>
            <param name="key">配置键</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.IConfigurationProvider.GetFloat(System.String,System.Single)">
            <summary>
            获取浮点类型配置值
            </summary>
            <param name="key">配置键</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.IConfigurationProvider.GetBool(System.String,System.Boolean)">
            <summary>
            获取bool类型配置值
            </summary>
            <param name="key">配置键</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.IConfigurationProvider.GetDouble(System.String,System.Double)">
            <summary>
            获取双浮点配置类型值
            </summary>
            <param name="key">配置键</param>
            <param name="defaultValue">默认配置</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.IConfigurationProvider.GetValue``1(System.String)">
            <summary>
            获取泛型配置值
            </summary>
            <typeparam name="T">配置类型</typeparam>
            <param name="key">配置键</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.IConfigurationProvider.SetValue(System.String,System.Object)">
            <summary>
            设置配置
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Basic.Framework.Configuration.ConfigurationFileProvider.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="appName">应用程序名称（全局唯一）</param>
        </member>
        <member name="M:Basic.Framework.Configuration.ConfigurationFileProvider.CreateException(System.String)">
            <summary>
            创建自定义异常类
            </summary>
            <param name="key">配置项键</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.ConfigurationFileProvider.GetBool(System.String,System.Boolean)">
            <summary>
            获取boolean类型配置
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.ConfigurationFileProvider.GetDateTime(System.String,System.DateTime)">
            <summary>
            获取DateTime类型配置
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.ConfigurationFileProvider.GetDouble(System.String,System.Double)">
            <summary>
            获取Double类型配置
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.ConfigurationFileProvider.GetFloat(System.String,System.Single)">
            <summary>
            获取Float类型配置
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.ConfigurationFileProvider.GetInt(System.String,System.Int32)">
             <summary>
            获取Int类型配置
             </summary>
             <param name="key">键</param>
             <param name="defaultValue">默认值</param>
             <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.ConfigurationFileProvider.GetString(System.String,System.String)">
            <summary>
            获取字符串类型配置
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.ConfigurationFileProvider.GetValue``1(System.String)">
            <summary>
            获取值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.ConfigurationFileProvider.SetValue(System.String,System.Object)">
            <summary>
            设置值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:Basic.Framework.Configuration.ConfigurationManager">
            <summary>
                作者：罗春虎
            创建时间：2016-7-26
            功能描述：统一配置管理器
            </summary>
        </member>
        <member name="F:Basic.Framework.Configuration.ConfigurationManager.AppName">
            <summary>
            应用程序名称
            </summary>
        </member>
        <member name="F:Basic.Framework.Configuration.ConfigurationManager.EnableConifgCenter">
            <summary>
            是否启用配置中西管理
            </summary>
        </member>
        <member name="F:Basic.Framework.Configuration.ConfigurationManager.ConfigCenter">
            <summary>
            配置中西地址
            </summary>
        </member>
        <member name="M:Basic.Framework.Configuration.ConfigurationManager.GetValue``1(System.String)">
            <summary>
            获取配置值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.ConfigurationManager.GetValue``1(System.String,System.String)">
            <summary>
            获取配置值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="appName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.ConfigurationManager.GetProvider">
            <summary>
            获取配置提供者
            </summary>
            <returns></returns>
        </member>
        <member name="P:Basic.Framework.Configuration.ConfigurationManager.FileConfiguration">
            <summary>
            配置文件配置
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.ConfigurationManager.RedisConfiguration">
            <summary>
            统一配置中心配置
            </summary>
        </member>
        <member name="T:Basic.Framework.Configuration.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:Basic.Framework.Configuration.DatabaseType.Oracle">
            <summary>
            oracle数据库
            </summary>
        </member>
        <member name="F:Basic.Framework.Configuration.DatabaseType.SQLServer">
            <summary>
            SqlServer数据库
            </summary>
        </member>
        <member name="F:Basic.Framework.Configuration.DatabaseType.MySQL">
            <summary>
            mysql数据库
            </summary>
        </member>
        <member name="F:Basic.Framework.Configuration.DatabaseType.Sqlite">
            <summary>
            sqllite数据库
            </summary>
        </member>
        <member name="T:Basic.Framework.Configuration.Global">
            <summary>
            全局系统参数定义
            </summary>
        </member>
        <member name="M:Basic.Framework.Configuration.Global.#cctor">
            <summary>
            set defautl configurations
            </summary>
        </member>
        <member name="F:Basic.Framework.Configuration.Global.globalName">
            <summary>
            全局系统参数应用名称
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.Global.IsDebug">
            <summary>
            是否调试
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.Global.IsEnabledReadWriteModel">
            <summary>
            是否启用数据读写分离模式
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.Global.SessionAddress">
            <summary>
            会话服务地址
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.Global.Domain">
            <summary>
            服务域名
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.Global.SessionLifeTime">
            <summary>
            会话默认时间
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.Global.SessionName">
            <summary>
            会话输出的客户端cookies中的名字
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.Global.EnableRedisSessionServer">
            <summary>
            是否启用统一会话功能
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.Global.SessionManagerType">
            <summary>
            统一会话管理器类型（1：内存缓存（默认）；2：Redis缓存；3：Mongodb缓存
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.Global.DatabaseType">
            <summary>
            设置当前数据类型
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.Global.DatabaseConfigName">
            <summary>
            数据库连接字符串名称
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.Global.MasterDatabase">
            <summary>
            主数据库
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.Global.SlaveDatabase">
            <summary>
            从数据库
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.Global.MessageQueueServer">
            <summary>
            消息队列服务器
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.Global.WebApiTokenSessionServer">
            <summary>
            webapitoken服务器
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.Global.MessageQueueQueryTime">
            <summary>
            消息队列 获取数据时间间隔
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.Global.LogWriterQueues">
            <summary>
            日志记录队列
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.Global.EnableLogLevel_None">
            <summary>
            启用日志级别none
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.Global.EnableLogLevel_SessionLog">
            <summary>
            启用日志级别sessionlog
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.Global.EnableLogLevel_Info">
            <summary>
            启用日志级别info
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.Global.EnableLogLevel_Exception">
            <summary>
            启动日志级别exception
            </summary>
        </member>
        <member name="P:Basic.Framework.Configuration.Global.EnableLogLevel_Debug">
            <summary>
            启动日志级别debug
            </summary>
        </member>
        <!-- 对于成员“P:Basic.Framework.Configuration.Global.EnableLogLevel_OperationLog”忽略有格式错误的 XML 注释 -->
        <member name="P:Basic.Framework.Configuration.Global.EnableTxtLog">
            <summary>
            是否启用文件日志功能
            </summary>
        </member>
        <member name="T:Basic.Framework.Configuration.CahceConfigurationProvider">
            <summary>
                作者：罗春虎
            创建时间：2016-7-26
            功能描述：统一配置缓存提供者
            </summary>
        </member>
        <member name="M:Basic.Framework.Configuration.CahceConfigurationProvider.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Basic.Framework.Configuration.CahceConfigurationProvider.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="appName"></param>
        </member>
        <member name="F:Basic.Framework.Configuration.CahceConfigurationProvider.IsInitOk">
            <summary>
            
            </summary>
        </member>
        <member name="M:Basic.Framework.Configuration.CahceConfigurationProvider.GetKey(System.String)">
            <summary>
            获取值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.CahceConfigurationProvider.GetBool(System.String,System.Boolean)">
            <summary>
            获取值
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.CahceConfigurationProvider.GetDateTime(System.String,System.DateTime)">
            <summary>
            获取值
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.CahceConfigurationProvider.GetDouble(System.String,System.Double)">
            <summary>
            获取值
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.CahceConfigurationProvider.GetFloat(System.String,System.Single)">
            <summary>
            获取值
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.CahceConfigurationProvider.GetInt(System.String,System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.CahceConfigurationProvider.GetString(System.String,System.String)">
            <summary>
            获取值
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.CahceConfigurationProvider.GetValue``1(System.String)">
            <summary>
            获取值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.CahceConfigurationProvider.SetValue(System.String,System.Object)">
            <summary>
            设置值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:Basic.Framework.Configuration.SecondLevelCache">
            <summary>
                作者：罗春虎
            创建时间：2016-7-26
            功能描述：统一配置二级缓存
            </summary>
        </member>
        <member name="F:Basic.Framework.Configuration.SecondLevelCache.secondLevelCache">
            <summary>
            二级缓存
            </summary>
        </member>
        <member name="F:Basic.Framework.Configuration.SecondLevelCache.configServer">
            <summary>
            配置中心地址
            </summary>
        </member>
        <member name="M:Basic.Framework.Configuration.SecondLevelCache.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Basic.Framework.Configuration.SecondLevelCache.Init">
            <summary>
            初始化系统
            </summary>
        </member>
        <member name="M:Basic.Framework.Configuration.SecondLevelCache.Clear">
            <summary>
            清除所有缓存数据
            </summary>
        </member>
        <member name="M:Basic.Framework.Configuration.SecondLevelCache.ConfigChangeHandler(StackExchange.Redis.RedisChannel,StackExchange.Redis.RedisValue)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="message"></param>
        </member>
        <member name="M:Basic.Framework.Configuration.SecondLevelCache.AddOrUpdateAppConfiguration(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            添加或者修改应用程序配置
            </summary>
            <param name="appName">应用程序名称（全局唯一）</param>
            <param name="configs">应用程序配置项</param>
        </member>
        <member name="M:Basic.Framework.Configuration.SecondLevelCache.AddOrUpdateAppConfiguration(System.String,System.String,System.String)">
            <summary>
            添加或者修改应用程序配置项
            </summary>
            <param name="appName">应用程序名称（全局唯一）</param>
            <param name="key">应用程序键</param>
            <param name="value">应用程序值</param>
        </member>
        <member name="M:Basic.Framework.Configuration.SecondLevelCache.RemoveConfiguration(System.String)">
            <summary>
            从二级缓存移除应用程序所有配置
            </summary>
            <param name="appName">应用程序名称（全局唯一）</param>
        </member>
        <member name="M:Basic.Framework.Configuration.SecondLevelCache.RemoveConfiguration(System.String,System.String)">
            <summary>
            从应用程序移除应用程序配置项
            </summary>
            <param name="appName">应用程序名称（全局唯一）</param>
            <param name="key">应用程序键</param>
        </member>
        <member name="M:Basic.Framework.Configuration.SecondLevelCache.ContainsAppConfig(System.String)">
            <summary>
            是否存在应用程序配置节点
            </summary>
            <param name="appName">应用程序名称（全局唯一）</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.SecondLevelCache.ContainsConfigItem(System.String,System.String)">
            <summary>
            是否存在应用程序配置项节点
            </summary>
            <param name="appName">应用程序名称（全局唯一）</param>
            <param name="key">应用程序配置项键</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.SecondLevelCache.GetAppConfigs(System.String)">
            <summary>
            获取应用程序所有配置信息
            </summary>
            <param name="appName">应用程序名称（全局唯一）</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Configuration.SecondLevelCache.GetAppConfigItem(System.String,System.String)">
            <summary>
            获取应用程序配置项
            </summary>
            <param name="appName">应用程序名称（全局唯一）</param>
            <param name="key">应用程序配置项键</param>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Data.DataAccess.MySqlHelper">
            <summary>
            
            </summary>
        </member>
        <member name="F:Basic.Framework.Data.DataAccess.MySqlHelper.BatchSize">
            <summary>
            批量操作每批次记录数
            </summary>
        </member>
        <member name="F:Basic.Framework.Data.DataAccess.MySqlHelper.CommandTimeOut">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.#ctor(System.String)">
             <summary>
            初始化MySqlHelper实例
             </summary>
             <param name="connectionString">数据库连接字符串</param>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteNonQuery(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回影响的行数
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteNonQuery(System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回影响的行数
            </summary>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteScalar``1(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <typeparam name="T">返回对象类型</typeparam>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteScalar(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteScalar(System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataReader(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataReader(System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataRow(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataRow(System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行
            </summary>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataTable(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一个数据表
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一个数据表</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataTable(System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一个数据表
            </summary>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一个数据表</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataSet(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataSet(System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集
            </summary>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.BatchUpdate(System.Data.DataTable)">
            <summary>
            使用MySqlDataAdapter批量更新数据
            </summary>
            <param name="table">数据表</param>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.BulkInsert(System.Data.DataTable)">
             <summary>
            大批量数据插入,返回成功插入行数
             </summary>
             <param name="table">数据表</param>
             <returns>返回成功插入行数</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteNonQuery(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回影响的行数
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回影响的行数
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回影响的行数
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回影响的行数
            </summary>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回影响的行数
            </summary>
            <param name="connection">数据库连接</param>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteScalar``1(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <typeparam name="T">返回对象类型</typeparam>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteScalar(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行第一列
            </summary>
            <param name="connection">数据库连接</param>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataReader(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataReader(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataReader(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataReader(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataReader(MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回只读数据集
            </summary>
            <param name="connection">数据库连接</param>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回只读数据集</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataRow(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>,返回结果集中的第一行</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataRow(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>,返回结果集中的第一行</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataRow(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>,返回结果集中的第一行</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataRow(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一行
            </summary>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>,返回结果集中的第一行</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataTable(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一个数据表
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一个数据表</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一个数据表
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一个数据表</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataTable(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一个数据表
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一个数据表</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataTable(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集中的第一个数据表
            </summary>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集中的第一个数据表</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteEmptyDataTable(System.String,System.String)">
            <summary>
            执行SQL语句,返回结果集中的第一个数据表
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="tableName">数据表名称</param>
            <returns>返回结果集中的第一个数据表</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataSet(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandText">SQL语句</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataSet(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集
            </summary>
            <param name="connection">数据库连接</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataSet(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集
            </summary>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.ExecuteDataSet(MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句,返回结果集
            </summary>
            <param name="connection">数据库连接</param>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型(存储过程,命令文本, 其它.)</param>
            <param name="commandText">SQL语句或存储过程名称</param>
            <param name="parms">查询参数</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.BatchUpdate(System.String,System.Data.DataTable)">
             <summary>
            使用MySqlDataAdapter批量更新数据
             </summary>
             <param name="connectionString">数据库连接字符串</param>
             <param name="table">数据表</param>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.BulkInsert(System.String,System.Data.DataTable)">
             <summary>
            大批量数据插入,返回成功插入行数
             </summary>
             <param name="connectionString">数据库连接字符串</param>
             <param name="table">数据表</param>
             <returns>返回成功插入行数</returns>
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.MySqlHelper.DataTableToCsv(System.Data.DataTable)">
             <summary>
            将DataTable转换为标准的CSV
             </summary>
             <param name="table">数据表</param>
             <returns>返回标准的CSV</returns>
        </member>
        <member name="P:Basic.Framework.Data.DataAccess.MySqlHelper.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="T:Basic.Framework.Data.DataAccess.SqlHelper">
            <summary> 
            SqlServer数据访问帮助类 
            </summary> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            将SqlParameter参数数组(参数值)分配给SqlCommand命令. 
            这个方法将给任何一个参数分配DBNull.Value; 
            该操作将阻止默认值的使用. 
            </summary> 
            <param name="command">命令名</param> 
            <param name="commandParameters">SqlParameters数组</param> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary> 
            将DataRow类型的列值分配到SqlParameter参数数组. 
            </summary> 
            <param name="commandParameters">要分配值的SqlParameter参数数组</param> 
            <param name="dataRow">将要分配给存储过程参数的DataRow</param> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary> 
            将一个对象数组分配给SqlParameter参数数组. 
            </summary> 
            <param name="commandParameters">要分配值的SqlParameter参数数组</param> 
            <param name="parameterValues">将要分配给存储过程参数的对象数组</param> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary> 
            预处理用户提供的命令,数据库连接/事务/命令类型/参数 
            </summary> 
            <param name="command">要处理的SqlCommand</param> 
            <param name="connection">数据库连接</param> 
            <param name="transaction">一个有效的事务或者是null值</param> 
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param> 
            <param name="commandText">存储过程名或都T-SQL命令文本</param> 
            <param name="commandParameters">和命令相关联的SqlParameter参数数组,如果没有参数为'null'</param> 
            <param name="mustCloseConnection"><c>true</c> 如果连接是打开的,则为true,其它情况下为false.</param> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.GetConnSting">
            <summary> 
            一个有效的数据库连接字符串 
            </summary> 
            <returns></returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.GetConnection">
            <summary> 
            一个有效的数据库连接对象 
            </summary> 
            <returns></returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary> 
            执行指定连接字符串,类型的SqlCommand. 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders"); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param> 
            <param name="commandText">存储过程名称或SQL语句</param> 
            <returns>返回命令影响的行数</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定连接字符串,类型的SqlCommand.如果没有提供参数,不返回结果. 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param> 
            <param name="commandText">存储过程名称或SQL语句</param> 
            <param name="commandParameters">SqlParameter参数数组</param> 
            <returns>返回命令影响的行数</returns> 
        </member>
        <!-- 对于成员“M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])”忽略有格式错误的 XML 注释 -->
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的命令 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接对象的命令 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param> 
            <param name="commandText">T存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">SqlParamter参数数组</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接对象的命令,将对象数组的值赋给存储过程参数. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值 
            示例:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <!-- 对于成员“M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行带事务的SqlCommand(指定参数). 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">SqlParamter参数数组</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary> 
            执行带事务的SqlCommand(指定参数值). 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值 
            示例:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回受影响的行数</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接字符串的命令,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接字符串的命令,返回DataSet. 
            </summary> 
            <remarks> 
            示例: 
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">SqlParamters参数数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接字符串的命令,直接提供参数值,返回DataSet. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值. 
            示例: 
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的命令,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接对象的命令,指定存储过程参数,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <param name="commandParameters">SqlParamter参数数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接对象的命令,指定参数值,返回DataSet. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输入参数和返回值. 
            示例.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary> 
            执行指定事务的命令,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="transaction">事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定事务的命令,指定参数,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <param name="commandParameters">SqlParamter参数数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary> 
            执行指定事务的命令,指定参数值,返回DataSet. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输入参数和返回值. 
            示例.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36); 
            </remarks> 
            <param name="transaction">事务</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],Basic.Framework.Data.DataAccess.SqlHelper.SqlConnectionOwnership)">
            <summary> 
            执行指定数据库连接对象的数据阅读器. 
            </summary> 
            <remarks> 
            如果是SqlHelper打开连接,当连接关闭DataReader也将关闭. 
            如果是调用都打开连接,DataReader由调用都管理. 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="transaction">一个有效的事务,或者为 'null'</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <param name="commandParameters">SqlParameters参数数组,如果没有参数则为'null'</param> 
            <param name="connectionOwnership">标识数据库连接对象是由调用者提供还是由SqlHelper提供</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接字符串的数据阅读器. 
            </summary> 
            <remarks> 
            示例:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接字符串的数据阅读器,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <param name="commandParameters">SqlParamter参数数组(new SqlParameter("@prodid", 24))</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接字符串的数据阅读器,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            示例:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的数据阅读器. 
            </summary> 
            <remarks> 
            示例:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            [调用者方式]执行指定数据库连接对象的数据阅读器,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandParameters">SqlParamter参数数组</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary> 
            [调用者方式]执行指定数据库连接对象的数据阅读器,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            示例:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">T存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary> 
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数值. 
            </summary> 
            <remarks> 
            示例:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数. 
            </summary> 
            <remarks> 
            示例:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary> 
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接字符串的命令,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount"); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接字符串的命令,指定参数,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接字符串的命令,指定参数值,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的命令,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接对象的命令,指定参数值,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库事务的命令,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount"); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库事务的命令,指定参数,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary> 
            执行指定数据库事务的命令,指定参数值,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的SqlCommand命令,并产生一个XmlReader对象做为结果集返回. 
            </summary> 
            <remarks> 
            示例:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接对象的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数.
            </summary> 
            <remarks> 
            示例:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接对象的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称 using "FOR XML AUTO"</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库事务的SqlCommand命令,并产生一个XmlReader对象做为结果集返回. 
            </summary> 
            <remarks> 
            示例:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库事务的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary> 
            执行指定数据库事务的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回一个包含结果集的DataSet.</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary> 
            执行指定数据库连接字符串的命令,映射数据表并填充数据集. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.)</param> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接字符串的命令,映射数据表并填充数据集.指定命令参数. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary> 
            执行指定数据库连接字符串的命令,映射数据表并填充数据集,指定存储过程参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param>    
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary> 
            执行指定数据库连接对象的命令,映射数据表并填充数据集. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param>    
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接对象的命令,映射数据表并填充数据集,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary> 
            执行指定数据库连接对象的命令,映射数据表并填充数据集,指定存储过程参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary> 
            执行指定数据库事务的命令,映射数据表并填充数据集. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库事务的命令,映射数据表并填充数据集,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary> 
            执行指定数据库事务的命令,映射数据表并填充数据集,指定存储过程参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary> 
            [私有方法][内部调用]执行指定数据库连接对象/事务的命令,映射数据表并填充数据集,DataSet/TableNames/SqlParameters. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary> 
            执行数据集更新到数据库,指定inserted, updated, or deleted命令. 
            </summary> 
            <remarks> 
            示例:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order"); 
            </remarks> 
            <param name="insertCommand">[追加记录]一个有效的T-SQL语句或存储过程</param> 
            <param name="deleteCommand">[删除记录]一个有效的T-SQL语句或存储过程</param> 
            <param name="updateCommand">[更新记录]一个有效的T-SQL语句或存储过程</param> 
            <param name="dataSet">要更新到数据库的DataSet</param> 
            <param name="tableName">要更新到数据库的DataTable</param> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary> 
            创建SqlCommand命令,指定数据库连接对象,存储过程名和参数. 
            </summary> 
            <remarks> 
            示例:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="sourceColumns">源表的列名称数组</param> 
            <returns>返回SqlCommand命令</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回受影响的行数. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回受影响的行数. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事物的存储过程,使用DataRow做为参数值,返回受影响的行数. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataSet. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回一个包含结果集的DataSet.</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataSet. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回一个包含结果集的DataSet.</returns> 
            
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回DataSet. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回一个包含结果集的DataSet.</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataReader. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataReader. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事物的存储过程,使用DataRow做为参数值,返回DataReader. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列.
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回XmlReader类型的结果集. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回XmlReader类型的结果集. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="T:Basic.Framework.Data.DataAccess.SqlHelper.SqlConnectionOwnership">
            <summary> 
            枚举,标识数据库连接是由SqlHelper提供还是由调用者提供 
            </summary> 
        </member>
        <member name="F:Basic.Framework.Data.DataAccess.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>由SqlHelper提供连接</summary> 
        </member>
        <member name="F:Basic.Framework.Data.DataAccess.SqlHelper.SqlConnectionOwnership.External">
            <summary>由调用者提供连接</summary> 
        </member>
        <member name="T:Basic.Framework.Data.DataAccess.SqlHelperParameterCache">
            <summary> 
            SqlHelperParameterCache提供缓存存储过程参数,并能够在运行时从存储过程中探索参数. 
            </summary> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary> 
            探索运行时的存储过程,返回SqlParameter参数数组. 
            初始化参数值为 DBNull.Value. 
            </summary> 
            <param name="connection">一个有效的数据库连接</param> 
            <param name="spName">存储过程名称</param> 
            <param name="includeReturnValueParameter">是否包含返回值参数</param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary> 
            SqlParameter参数数组的深层拷贝. 
            </summary> 
            <param name="originalParameters">原始参数数组</param> 
            <returns>返回一个同样的参数数组</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            追加参数数组到缓存. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandText">存储过程名或SQL语句</param> 
            <param name="commandParameters">要缓存的参数数组</param> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary> 
            从缓存中获取参数数组. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符</param> 
            <param name="commandText">存储过程名或SQL语句</param> 
            <returns>参数数组</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary> 
            返回指定的存储过程的参数集 
            </summary> 
            <remarks> 
            这个方法将查询数据库,并将信息存储到缓存. 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符</param> 
            <param name="spName">存储过程名</param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary> 
            返回指定的存储过程的参数集 
            </summary> 
            <remarks> 
            这个方法将查询数据库,并将信息存储到缓存. 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符.</param> 
            <param name="spName">存储过程名</param> 
            <param name="includeReturnValueParameter">是否包含返回值参数</param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary> 
            [内部]返回指定的存储过程的参数集(使用连接对象). 
            </summary> 
            <remarks> 
            这个方法将查询数据库,并将信息存储到缓存. 
            </remarks> 
            <param name="connection">一个有效的数据库连接字符</param> 
            <param name="spName">存储过程名</param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary> 
            [内部]返回指定的存储过程的参数集(使用连接对象) 
            </summary> 
            <remarks> 
            这个方法将查询数据库,并将信息存储到缓存. 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="includeReturnValueParameter"> 
            是否包含返回值参数 
            </param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="M:Basic.Framework.Data.DataAccess.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary> 
            [私有]返回指定的存储过程的参数集(使用连接对象) 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="includeReturnValueParameter">是否包含返回值参数</param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="T:Basic.Framework.Data.DbContextManager">
            <summary>
                作者：罗春虎
            创建时间：2016-7-28
            功能描述：数据上下文统一管理
            
            update by 罗春虎  at  2016-6-13 优化datacontext创建方式，解决资源释放问题
            </summary>
        </member>
        <member name="M:Basic.Framework.Data.DbContextManager.CreateDbContext(System.Data.Entity.DbContext)">
            <summary>
            创建数据库上下文，每次请求创建一个，用完释放
            </summary>
            <param name="context">数据库上下文实例</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Data.DbContextManager.DisposeDbContext(System.Data.Entity.DbContext)">
            <summary>
            释放数据库上下文 每次请求创建一个，用完释放
            </summary>
            <param name="context">要释放的数据库上下文，如果为null 则释放制定位置存放的上下文对象</param>
        </member>
        <member name="T:Basic.Framework.Data.IRepository`1">
            <summary>
                作者：罗春虎
            创建时间：2016-7-28
            功能描述：数据库访问统一接口
            </summary>
        </member>
        <member name="M:Basic.Framework.Data.IRepository`1.Insert(`0)">
            <summary>
            添加数据
            </summary>
            <param name="entity">添加数据模型</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Data.IRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量添加数据
            </summary>
            <param name="entities">添加数据模型</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Data.IRepository`1.Delete(System.Object)">
            <summary>
            根据主键id 删除数据
            </summary>
            <param name="id">主键id</param>
        </member>
        <member name="M:Basic.Framework.Data.IRepository`1.Delete(`0)">
            <summary>
            删除实体对象
            </summary>
            <param name="entity">要删除的实体对象</param>
        </member>
        <member name="M:Basic.Framework.Data.IRepository`1.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量删除数据
            </summary>
            <param name="entities">要删除的对象集合</param>
        </member>
        <member name="M:Basic.Framework.Data.IRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件删除数据
            </summary>
            <param name="predicate">删除条件</param>
        </member>
        <member name="M:Basic.Framework.Data.IRepository`1.Update(`0)">
            <summary>
            更新数据
            </summary>
            <param name="entity">要更新的数据</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Data.IRepository`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量更新数据
            </summary>
            <param name="entities">更新的数据集合</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Data.IRepository`1.GetByKey(System.Object)">
            <summary>
            跟进主键获取数据
            </summary>
            <param name="key">主键key</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Data.IRepository`1.ToEntityFromTable``1(System.Data.DataTable)">
            <summary>
            datatable转换实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Data.IRepository`1.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            执行无返回结果的数据查询
            </summary>
            <param name="sqlName">配置的SQL名称</param>
            <param name="paramters">SQL参数</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Data.IRepository`1.QueryTable(System.String,System.Object[])">
            <summary>
            根据配置的SQL Name查询数据集 
            </summary>
            <typeparam name="T">返回的实体对象</typeparam>
            <param name="sqlName">配置的SQL名称</param>
            <param name="paramters">SQL参数</param>
            <returns>实体数据集</returns>
        </member>
        <member name="M:Basic.Framework.Data.IRepository`1.QueryTable(System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            分页查询（基于SQL名称查询）
            </summary>
            <param name="sqlName">配置的SQL名称</param>
            <param name="pageNumber">当前页</param>
            <param name="pageSize">当前页显示数据条数</param>
            <param name="paramters">SQL参数</param>
            <returns></returns>      
        </member>
        <member name="M:Basic.Framework.Data.IRepository`1.GetTotalRecord(System.String,System.Object[])">
            <summary>
            根据SQL返回记录数
            </summary>
            <param name="sqlName">配置的SQL名称</param>
            <param name="paramters">SQL参数</param>
            <returns></returns>        
        </member>
        <member name="M:Basic.Framework.Data.IRepository`1.SqlQuery``1(System.String,System.Object[])">
            <summary>
            基于SQL 执行有返回结果的数据查询
            </summary>
            <param name="sqlText">执行的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Data.IRepository`1.BulkCopy(System.String,System.Data.DataTable,System.Data.DataColumn[])">
            <summary>
            批量入库 dt
            </summary>
            <param name="tableName">插入的表名称</param>
            <param name="dt">插入的数据体集 datatable</param>
            <param name="dataColumns">插入的数据字段集 DataColumns</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:Basic.Framework.Data.IRepository`1.BulkCopy(System.String,System.Collections.Generic.IList{`0},System.Data.DataColumn[])">
            <summary>
            批量入库 List对象
            </summary>
            <param name="tableName">插入的表名称</param>
            <param name="entityList">插入的数据体集 list对象集合</param>
            <param name="dataColumns">插入的数据字段集</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Data.IRepository`1.BulkUpdate(System.String,System.Collections.Generic.IList{`0},System.Data.DataColumn[],System.String)">
            <summary>
            批量更新接口（暂只支持mysql）
            </summary>
            <param name="tabName"></param>
            <param name="list"></param>
            <param name="dataColumns"></param>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="P:Basic.Framework.Data.IRepository`1.Datas">
            <summary>
            延迟加载数据库表数据
            </summary>
        </member>
        <member name="P:Basic.Framework.Data.IRepository`1.DatebaseName">
            <summary>
            获取数据库名称
            </summary>
        </member>
        <member name="T:Basic.Framework.Data.EntityContext">
            <summary>
                作者：罗春虎
            创建时间：2016-7-28
            功能描述：数据统一管理对象
            </summary>
        </member>
        <member name="P:Basic.Framework.Data.EntityContext.Current">
            <summary>
            获取当前实例化DataContext
            </summary>
        </member>
        <member name="T:Basic.Framework.Data.RuntimeType">
            <summary>
                作者：罗春虎
            创建时间：2016-7-28
            功能描述：当前程序运行环境
            </summary>
        </member>
        <member name="T:Basic.Framework.Data.PlatRuntime">
            <summary>
                作者：罗春虎
            创建时间：2016-7-28
            功能描述：平台运行时对象
            </summary>
        </member>
        <member name="M:Basic.Framework.Data.PlatRuntime.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Basic.Framework.Data.PlatRuntime.CurrentRuntimeType">
            <summary>
            获取当前运行时类型
            </summary>
        </member>
        <member name="P:Basic.Framework.Data.PlatRuntime.Items">
            <summary>
            存储项
            </summary>
        </member>
        <member name="T:Basic.Framework.Data.RepositoryBase`1">
            <summary>
                作者：罗春虎
            创建时间：2016-7-28
            功能描述：数据库访问接口实现
            update by 罗春虎  at  2016-6-13 优化datacontext创建方式，解决资源释放问题
            https://stackoverflow.com/questions/28653352/entity-framework-unexpected-connection-state-exception
            </summary>
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.Insert(`0)">
            <summary>
            添加数据
            </summary>
            <param name="entity">入库数据对象</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量添加数据
            </summary>
            <param name="entities">入库数据集合</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.Delete(System.Object)">
            <summary>
            根据主键删除数据
            </summary>
            <param name="id">主键id</param>
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.Delete(`0)">
            <summary>
            删除实体
            </summary>
            <param name="entity">要删除的对象</param>
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量删除
            </summary>
            <param name="entities">要删除的数据集合</param>
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件删除数据
            </summary>
            <param name="predicate">删除条件</param>
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.Update(`0)">
            <summary>
            更新实体对象
            </summary>
            <param name="entity">要更新的实体对象</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量更新数据
            </summary>
            <param name="entities">更新的数据集合</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.GetByKey(System.Object)">
            <summary>
            根据主键获取数据
            </summary>
            <param name="key">主键</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            执行无返回结果的数据查询
            </summary>
            <param name="sqlName">配置的SQL名称</param>
            <param name="paramters">SQL参数</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.ExecuteNonQueryBySql(System.String)">
            <summary>
            根据SQL执行无返回结果的数据查询
            </summary>
            <param name="sqlText">执行的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.SqlQuery``1(System.String,System.Object[])">
            <summary>
            根据配置的SQL Name查询数据集 
            </summary>
            <typeparam name="T">返回的实体对象</typeparam>
            <param name="sqlName">配置的SQL名称</param>
            <param name="paramters">SQL参数</param>
            <returns>实体数据集</returns>
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.SqlQueryBySql``1(System.String)">
            <summary>
            根据SQL查询数据集
            </summary>
            <typeparam name="T">返回的实体对象</typeparam>
            <param name="sqlText">执行的SQL语句</param>
            <returns>实体数据集</returns>
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.QueryTable(System.String,System.Object[])">
            <summary>
            执行有返回结果的数据查询
            </summary>
            <param name="sqlName">配置的SQL名称</param>
            <param name="paramters">SQL参数</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.QueryTableBySql(System.String)">
            <summary>
            基于SQL 执行有返回结果的数据查询
            </summary>
            <param name="sqlText">执行的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.QueryTable(System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            分页查询（基于SQL名称查询）
            </summary>
            <param name="sqlName">配置的SQL名称</param>
            <param name="pageNumber">当前页</param>
            <param name="pageSize">当前页显示数据条数</param>
            <param name="paramters">SQL参数</param>
            <returns></returns>      
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.QueryTableBySql(System.String,System.Int32,System.Int32)">
            <summary>
            分页查询（基于SQL语句查询）
            </summary>
            <param name="sqlText">执行的SQL语句</param>
            <param name="pageNumber">当前页</param>
            <param name="pageSize">当前页显示数据条数</param>
            <returns></returns>      
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.GetLimitString(System.String,System.Int32,System.Int32)">
            <summary>
            获取分页SQL
            </summary>
            <param name="originalSql">原始SQL</param>
            <param name="pageNumber">要获取的页号</param>
            <param name="pageSize">每页条数</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.GetTotalRecord(System.String,System.Object[])">
            <summary>
            根据SQL返回记录数
            </summary>
            <param name="sqlName">配置的SQL名称</param>
            <param name="paramters">SQL参数</param>
            <returns></returns>        
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.GetTotalRecordBySql(System.String)">
            <summary>
            根据SQL返回记录数
            </summary>
            <param name="sqlText">执行的SQL语句</param>
            <returns></returns>        
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.BulkCopy(System.String,System.Data.DataTable,System.Data.DataColumn[])">
            <summary>
            批量入库 dt
            </summary>
            <param name="tableName">插入的表名称</param>
            <param name="dt">插入的数据体集 datatable</param>
            <param name="dataColumns">插入的数据字段集 DataColumns</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.BulkCopy(System.String,System.Collections.Generic.IList{`0},System.Data.DataColumn[])">
            <summary>
            批量入库 List对象
            </summary>
            <param name="tableName">插入的表名称</param>
            <param name="entityList">插入的数据体集 list对象集合</param>
            <param name="dataColumns">插入的数据字段集</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Data.RepositoryBase`1.ToEntityFromTable``1(System.Data.DataTable)">
            <summary>
            DataTable 转实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="P:Basic.Framework.Data.RepositoryBase`1.DataContext">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="P:Basic.Framework.Data.RepositoryBase`1.Datas">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.Data.RepositoryBase`1.Entities">
            <summary>
            数据表集合
            </summary>
        </member>
        <member name="P:Basic.Framework.Data.RepositoryBase`1.DatebaseName">
            <summary>
            获取数据库名称
            </summary>
        </member>
        <member name="T:Basic.Framework.Data.Cmd">
            <summary>
            sql命令
            </summary>
        </member>
        <member name="P:Basic.Framework.Data.Cmd.Name">
            <summary>
            唯一名称
            </summary>
        </member>
        <member name="P:Basic.Framework.Data.Cmd.Oracle_SQLText">
            <summary>
            oracle命令
            </summary>
        </member>
        <member name="P:Basic.Framework.Data.Cmd.MySQL_SQLText">
            <summary>
            mysql命令
            </summary>
        </member>
        <member name="P:Basic.Framework.Data.Cmd.SqlServer_SQLText">
            <summary>
            sqlserver命令
            </summary>
        </member>
        <member name="P:Basic.Framework.Data.Cmd.Sqlite_SQLText">
            <summary>
            sqlite命令
            </summary>
        </member>
        <member name="T:Basic.Framework.Data.SQLCmds">
            <summary>
            sql命令
            </summary>
        </member>
        <member name="M:Basic.Framework.Data.SQLCmds.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Basic.Framework.Data.SQLCmds.GetSQLText(System.String)">
            <summary>
            获取命令
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Basic.Framework.Data.SQLCmds.Cmds">
            <summary>
            命令集合
            </summary>
        </member>
        <member name="T:Basic.Framework.Data.SqlTextManager">
            <summary>
            命令管理器
            </summary>
        </member>
        <member name="M:Basic.Framework.Data.SqlTextManager.GetSQLText(System.String)">
            <summary>
            跟进唯一名称获取sql命令
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Data.TransactionsManager">
            <summary>
                作者：罗春虎
            创建时间：2016-7-28
            功能描述：事务管理对象
            </summary>
        </member>
        <member name="M:Basic.Framework.Data.TransactionsManager.BeginTransaction(System.Action)">
            <summary>
            自动事务处理
            </summary>
            <param name="doAction"></param>
        </member>
        <member name="M:Basic.Framework.Data.TransactionsManager.BeginTransaction(System.Action,System.Transactions.TransactionScopeOption)">
            <summary>
            自动事务处理
            </summary>
            <param name="doAction"></param>
            <param name="tranOptions"></param>
        </member>
        <member name="T:Basic.Framework.DesignPattern.Singletons.SingletonService">
            <summary>
            作者：罗春虎
            时间：2017-6-15
            泛型服务单例
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Basic.Framework.DesignPattern.Singletons.Singleton`1">
            <summary>
            作者：罗春虎
            时间：2017-6-15
            泛型单例
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Basic.Framework.Entity.BasicResult">
            <summary>
             通用返回结果实体对象
             </summary>
        </member>
        <member name="M:Basic.Framework.Entity.BasicResult.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Basic.Framework.Entity.BasicResult.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="code">编码</param>
        </member>
        <member name="M:Basic.Framework.Entity.BasicResult.#ctor(System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="code">编码</param>
            <param name="message">信息描述</param>
        </member>
        <member name="P:Basic.Framework.Entity.BasicResult.Message">
            <summary>
            消息描述
            </summary>       
        </member>
        <member name="P:Basic.Framework.Entity.BasicResult.Code">
            <summary>
            返回编码
            100成功
            -100失败
            </summary>
        </member>
        <member name="P:Basic.Framework.Entity.BasicResult.IsSuccess">
            <summary>
            是否执行成功
            </summary>
        </member>
        <member name="T:Basic.Framework.Entity.BasicResult`1">
            <summary>
            Mas泛型通用返回结果实体对象
            </summary>
            <typeparam name="T">返回的数据体（Data的数据类型）</typeparam>
        </member>
        <member name="M:Basic.Framework.Entity.BasicResult`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Basic.Framework.Entity.BasicResult`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="code">编码</param>
        </member>
        <member name="M:Basic.Framework.Entity.BasicResult`1.#ctor(System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="code">编码</param>
            <param name="message">信息描述</param>
        </member>
        <member name="P:Basic.Framework.Entity.BasicResult`1.Data">
            <summary>
            泛型业务数据
            </summary>
        </member>
        <member name="T:Basic.Framework.Entity.BasicResultCodes">
            <summary>
            返回值码定义
            </summary>   
        </member>
        <member name="F:Basic.Framework.Entity.BasicResultCodes.CommonSuccess">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:Basic.Framework.Entity.BasicResultCodes.NeedLogin">
            <summary>
            未登陆或者token已失效，需要重新登录
            </summary>
        </member>
        <member name="F:Basic.Framework.Entity.BasicResultCodes.Forbid">
            <summary>
            请求频繁，非法访问，请稍后再试
            </summary>
        </member>
        <member name="F:Basic.Framework.Entity.BasicResultCodes.ParamsError">
            <summary>
            参数错误
            </summary>
        </member>
        <member name="F:Basic.Framework.Entity.BasicResultCodes.Abnormity">
            <summary>
            操作异常
            </summary>
        </member>
        <member name="F:Basic.Framework.Entity.BasicResultCodes.CommonFailure">
            <summary>
            执行意外失败
            </summary>
        </member>
        <member name="F:Basic.Framework.Entity.BasicResultCodes.CommonBusinessFailure">
            <summary>
            业务意外失败
            </summary>
        </member>
        <member name="F:Basic.Framework.Entity.BasicResultCodes.CommonSuccessMessage">
            <summary>
            成功的默认描述
            </summary>
        </member>
        <member name="F:Basic.Framework.Entity.BasicResultCodes.NeedLoginMessage">
            <summary>
            未登录或者token过期提示
            </summary>
        </member>
        <member name="F:Basic.Framework.Entity.BasicResultCodes.CommonFailureMessage">
            <summary>
            失败的默认描述
            </summary>
        </member>
        <member name="M:Basic.Framework.Entity.BasicResultCodes.GetMessage(System.Int32)">
            <summary>
            根据编码获取提示信息
            </summary>
            <param name="code">编码</param>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.ExceptionHanding.AuthorizationException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Basic.Framework.ExceptionHanding.BaseException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Basic.Framework.ExceptionHanding.BaseException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Basic.Framework.ExceptionHanding.BaseException.AppName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.ExceptionHanding.BaseException.FunctionName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.ExceptionHanding.BaseException.InnerException">
            <summary>
            
            </summary>
            
        </member>
        <member name="M:Basic.Framework.ExceptionHanding.AuthorizationException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Basic.Framework.ExceptionHanding.CacheException">
            <summary>
            
            </summary>
        </member>
        <!-- 对于成员“M:Basic.Framework.ExceptionHanding.CacheException.#ctor(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="T:Basic.Framework.ExceptionHanding.ConfigurationException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Basic.Framework.ExceptionHanding.ConfigurationException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Basic.Framework.ExceptionHanding.DatabaseException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Basic.Framework.ExceptionHanding.DatabaseException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Basic.Framework.ExceptionHanding.FrameworkException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Basic.Framework.ExceptionHanding.FrameworkException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Basic.Framework.Ioc.InstanceType">
            <summary>
            注入对象生命周期类型
            </summary>
        </member>
        <member name="F:Basic.Framework.Ioc.InstanceType.PerLifetimeScope">
            <summary>
            在一个生命周期内，调用共享一个实例（默认）
            </summary>
        </member>
        <member name="F:Basic.Framework.Ioc.InstanceType.PerDependency">
            <summary>
            每次调用创建一个新实例
            </summary>
        </member>
        <member name="F:Basic.Framework.Ioc.InstanceType.SingleInstance">
            <summary>
            单例模式
            </summary>
        </member>
        <member name="T:Basic.Framework.Ioc.IocManager">
            <summary>
                作者：罗春虎
            创建时间：2016-7-28
            功能描述：IoC管理器
            </summary>
        </member>
        <member name="M:Basic.Framework.Ioc.IocManager.RegistObject``2(Basic.Framework.Ioc.InstanceType)">
            <summary>
            注册对象
            </summary>
            <typeparam name="Interface"></typeparam>
            <typeparam name="Implement"></typeparam>
        </member>
        <member name="M:Basic.Framework.Ioc.IocManager.RegistObject``2(System.String,Basic.Framework.Ioc.InstanceType)">
            <summary>
            注册对象-自定名称
            </summary>
            <typeparam name="Interface"></typeparam>
            <typeparam name="Implement"></typeparam>
            <param name="name"></param>
        </member>
        <member name="M:Basic.Framework.Ioc.IocManager.RegisterInstance``1(System.Object,Basic.Framework.Ioc.InstanceType)">
            <summary>
            注册实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
        </member>
        <member name="M:Basic.Framework.Ioc.IocManager.RegisterInstance``1(System.String,System.Object,Basic.Framework.Ioc.InstanceType)">
            <summary>
            注册带命名的实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="instance"></param>
        </member>
        <member name="M:Basic.Framework.Ioc.IocManager.RegistAssembly(System.Reflection.Assembly[])">
            <summary>
            注册程序集
            </summary>
            <param name="assemblies"></param>
        </member>
        <member name="M:Basic.Framework.Ioc.IocManager.GetObject(System.Type)">
            <summary>
            获取对象
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Ioc.IocManager.GetContainer">
            <summary>
            获取IoC容器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Ioc.IocManager.Build">
            <summary>
            初始化完毕后进行对象组装
            </summary>
        </member>
        <member name="M:Basic.Framework.Ioc.IocManager.GetObject``1">
            <summary>
            获取泛型对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Ioc.IocManager.GetObject``1(System.String)">
            <summary>
            获取对象-跟进自定义名称
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.JobSchedule.Bootstrap">
            <summary>
                作者：罗春虎
            创建时间：2016-8-5
            功能描述：作业调度服务-独立应用程序域启动器
            </summary>
        </member>
        <member name="M:Basic.Framework.JobSchedule.Bootstrap.ExecuteJobInIndependentDomain(System.String)">
            <summary> 
            在TaskHost的程序内部，在一个独立的应用程序域里执行作业，作业执行完自动释放。
            </summary>
            <param name="jobPath"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.JobSchedule.Bootstrap.NewAppDomain_UnhandledException(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Basic.Framework.JobSchedule.CronUtil">
            <summary>
                作者：罗春虎
            创建时间：2016-8-5
            功能描述：作业调度服务-表达式解析器
            </summary>
        </member>
        <member name="M:Basic.Framework.JobSchedule.CronUtil.IsValidCronExpression(System.String)">
            <summary>
            检查表达式是否正确
            </summary>
            <param name="jobCron">Cron 表达式</param>
            <returns>检查结果。True:正确; False:不正确</returns>
        </member>
        <member name="M:Basic.Framework.JobSchedule.CronUtil.GetNextTimeByCronExpress(System.String)">
            <summary>
            获取表达式下次执行时间（以当前DateTime.Now做计算）
            </summary>
            <param name="jobCron">Cron 表达式</param>
            <returns>下次执行时间（本地时间）</returns>
        </member>
        <member name="M:Basic.Framework.JobSchedule.CronUtil.GetNextTimeByCronExpress(System.String,System.DateTime)">
            <summary>
            获取表达式下次执行时间
            如果表达式不正确，会抛出 Exception
            </summary>
            <param name="jobCron">Cron 表达式</param>
            <param name="dateTime">计算下次执行的参照时间</param>
            <returns>下次执行时间（本地时间）</returns>
        </member>
        <member name="M:Basic.Framework.JobSchedule.CronUtil.GetCronDescription(System.String)">
            <summary>
            获取Cron 表达式中文说明
            </summary>
            <param name="jobCron">Cron 表达式</param>
            <returns>中文说明，如果返回空，则表达式不正确</returns>
        </member>
        <member name="T:Basic.Framework.JobSchedule.DomainInvoker">
            <summary>
                作者：罗春虎
            创建时间：2016-8-5
            功能描述：作业调度服务-域加载器
            </summary>
        </member>
        <member name="T:Basic.Framework.JobSchedule.BasicTask">
            <summary>
            定时任务基类
            </summary>
        </member>
        <member name="M:Basic.Framework.JobSchedule.BasicTask.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="taskName">任务名称</param>
            <param name="interval">轮询时间（单位毫秒）</param>
            <param name="interval">是否为后台线程（默认为后台线程）</param>
        </member>
        <member name="M:Basic.Framework.JobSchedule.BasicTask.Start">
            <summary>
            任务启动
            </summary>
        </member>
        <member name="M:Basic.Framework.JobSchedule.BasicTask.Stop">
            <summary>
            任务停止
            </summary>
        </member>
        <member name="M:Basic.Framework.JobSchedule.BasicTask.RunTask">
            <summary>
            执行任务
            </summary>
        </member>
        <member name="M:Basic.Framework.JobSchedule.BasicTask.DoWork">
            <summary>
            执行任务
            </summary>
        </member>
        <member name="P:Basic.Framework.JobSchedule.BasicTask.IsRunning">
            <summary>
            是否运行
            </summary>
        </member>
        <member name="P:Basic.Framework.JobSchedule.BasicTask.IsNotSleepDoWork">
            <summary>
            是否不休眠执行标识
            </summary>
        </member>
        <member name="T:Basic.Framework.JobSchedule.RemoteLoader">
            <summary>
                作者：罗春虎
            创建时间：2016-8-5
            功能描述：作业调度服务-远程对象加载器
            </summary>
        </member>
        <member name="T:Basic.Framework.JobSchedule.TaskHost">
            <summary>
                作者：罗春虎
            创建时间：2016-8-5
            功能描述：作业调度服务器
            任务工作状态、任务参数自定义、任务工具未实现好
            </summary>
        </member>
        <member name="M:Basic.Framework.JobSchedule.TaskHost.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="M:Basic.Framework.JobSchedule.TaskHost.Restart">
            <summary>
            
            </summary>
        </member>
        <member name="T:Basic.Framework.JobSchedule.TaskModel">
            <summary>
                作者：罗春虎
            创建时间：2016-8-5
            功能描述：任务作业模型
            </summary>
        </member>
        <member name="M:Basic.Framework.JobSchedule.TaskModel.CreateQuerySQLCmd">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.JobSchedule.TaskModel.LoadTasks">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Basic.Framework.JobSchedule.TaskModel.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.JobSchedule.TaskModel.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.JobSchedule.TaskModel.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.JobSchedule.TaskModel.CronExpression">
            <summary>
            表达式（参考资料：http://www.cnblogs.com/sunjie9606/archive/2012/03/15/2397626.html）
            </summary>
        </member>
        <member name="P:Basic.Framework.JobSchedule.TaskModel.LastStartTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.JobSchedule.TaskModel.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.JobSchedule.TaskModel.RootPath">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.JobSchedule.TaskModel.NextExecuteTime">
            <summary>
            
            </summary>
        </member>
        <member name="T:Basic.Framework.Logging.LogDispatcher">
            <summary>
                作者：罗春虎
            创建时间：2016-8-3
            功能描述：日志分发服务
            </summary>
        </member>
        <member name="M:Basic.Framework.Logging.LogDispatcher.ProcessLog(Basic.Framework.Logging.LogModel)">
            <summary>
            处理接受到的日志
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:Basic.Framework.Logging.LogDispatcher.GetQueues">
            <summary>
            获取日志队列
            </summary>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Logging.Logger">
            <summary>
                作者：罗春虎
            创建时间：2016-8-3
            功能描述：本地日志文件服务（logo4net封装）   
            </summary>
        </member>
        <member name="M:Basic.Framework.Logging.Logger.Debug(System.Object)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Basic.Framework.Logging.Logger.Debug(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Basic.Framework.Logging.Logger.Error(System.Object)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Basic.Framework.Logging.Logger.Error(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Basic.Framework.Logging.Logger.Fatal(System.Object)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Basic.Framework.Logging.Logger.Fatal(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Basic.Framework.Logging.Logger.Info(System.Object)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Basic.Framework.Logging.Logger.Info(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Basic.Framework.Logging.Logger.Warn(System.Object)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Basic.Framework.Logging.Logger.Warn(System.Object,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="T:Basic.Framework.Logging.LogHelper">
            <summary>
            日志辅助类
            </summary>
        </member>
        <member name="M:Basic.Framework.Logging.LogHelper.#cctor">
            <summary>
            静态构造方法，初始参数
            </summary>
        </member>
        <member name="M:Basic.Framework.Logging.LogHelper.Info(System.Object)">
            <summary>
            信息类日志写入方法
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Basic.Framework.Logging.LogHelper.Warn(System.Object)">
            <summary>
            告警类日志写入方法（对字符串类型参数做了换行符和回车符替换处理）
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Basic.Framework.Logging.LogHelper.Error(System.Object)">
            <summary>
            错误类日志写入方法（对字符串类型参数做了换行符和回车符替换处理）
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Basic.Framework.Logging.LogHelper.SystemInfo(System.Object)">
            <summary>
            系统信息类日志写入方法
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Basic.Framework.Logging.LogHelper.Debug(System.Object)">
            <summary>
            调试信息类日志写入方法
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Basic.Framework.Logging.LogManager">
            <summary>
                作者：罗春虎
            创建时间：2016-8-3
            功能描述：日志管理器，负责分发处理日志
            </summary>
        </member>
        <member name="M:Basic.Framework.Logging.LogManager.Log(Basic.Framework.Logging.LogModel)">
            <summary>
            记录日志
            </summary>
            <param name="log">日志对象</param>
        </member>
        <member name="M:Basic.Framework.Logging.LogManager.Log(System.String,System.String,System.String,System.String,System.String,Basic.Framework.Logging.LogType,System.String,System.String)">
            <summary>
            记录日志
            </summary>
            <param name="appName">应用程序名</param>
            <param name="modelName">模块名称</param>
            <param name="message">日志消息</param>
            <param name="detail">详细信息</param>
            <param name="lable">标签</param>
            <param name="type">类型</param>
        </member>
        <member name="M:Basic.Framework.Logging.LogManager.Log(System.String,System.String,System.String,System.String,System.String,System.String,System.String,Basic.Framework.Logging.LogType,System.String,System.String)">
            <summary>
            记录日志
            </summary>
            <param name="appName">应用程序名</param>
            <param name="modelName">模块名称</param>
            <param name="message">日志消息</param>
            <param name="detail">详细信息</param>
            <param name="lable">标签</param>
            <param name="type">类型</param>
            <param name="userName">用户名称</param>
            <param name="userId">用户id</param>
        </member>
        <member name="M:Basic.Framework.Logging.LogManager.NeedLog(Basic.Framework.Logging.LogModel)">
            <summary>
            是否需要处理
            </summary>
            <param name="log">日志对象</param>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Logging.LogModel">
            <summary>
                作者：罗春虎
            创建时间：2016-8-3
            功能描述：日志模型
            </summary>
        </member>
        <member name="M:Basic.Framework.Logging.LogModel.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Basic.Framework.Logging.LogModel.#ctor(System.String,System.String,System.String,System.String,System.String,Basic.Framework.Logging.LogType,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="appName">应用程序名</param>
            <param name="modelName">模块名称</param>
            <param name="message">日志消息</param>
            <param name="detail">详细信息</param>
            <param name="lable">标签</param>
            <param name="type">类型</param>
        </member>
        <member name="M:Basic.Framework.Logging.LogModel.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,Basic.Framework.Logging.LogType,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="appName">应用程序名</param>
            <param name="modelName">模块名称</param>
            <param name="title">日志消息</param>
            <param name="content">详细信息</param>
            <param name="lable">标签</param>
            <param name="type">类型</param>
            <param name="userName">用户名称</param>
            <param name="userId">用户id</param>
        </member>
        <member name="M:Basic.Framework.Logging.LogModel.ToString">
            <summary>
            重写ToString方法，格式化字符类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Logging.LogModel.CreateSQLCmd">
            <summary>
            创建数据库存储sql脚本
            </summary>
            <returns></returns>
        </member>
        <member name="P:Basic.Framework.Logging.LogModel.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.Logging.LogModel.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.Logging.LogModel.ServerName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.Logging.LogModel.ServerIP">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.Logging.LogModel.ClientIP">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.Logging.LogModel.Title">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.Logging.LogModel.Content">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.Logging.LogModel.LogTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.Logging.LogModel.AppCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.Logging.LogModel.ModuleCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.Logging.LogModel.Lable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.Logging.LogModel.LogType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.Logging.LogModel.Code">
            <summary>
            
            </summary>
        </member>
        <member name="T:Basic.Framework.Logging.LogProcessor">
            <summary>
                作者：罗春虎
            创建时间：2016-8-3
            功能描述：日志服务端处理器
            </summary>
        </member>
        <member name="M:Basic.Framework.Logging.LogProcessor.GetQueues">
            <summary>
            获取日志队列信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Logging.LogProcessor.Start">
            <summary>
            开始处理日志
            </summary>
        </member>
        <member name="M:Basic.Framework.Logging.LogProcessor.Restart">
            <summary>
            重写期待日志处理功能
            </summary>
        </member>
        <member name="M:Basic.Framework.Logging.LogProcessor.Stop">
            <summary>
            停止日志处理服务
            </summary>
        </member>
        <member name="T:Basic.Framework.Logging.LogType">
            <summary>
            日志记录类型
            </summary>
        </member>
        <member name="F:Basic.Framework.Logging.LogType.None">
            <summary>
            未定义
            </summary>
        </member>
        <member name="F:Basic.Framework.Logging.LogType.SessionLog">
            <summary>
            会话日志
            </summary>
        </member>
        <member name="F:Basic.Framework.Logging.LogType.OperationLog">
            <summary>
            操作日志
            </summary>
        </member>
        <member name="F:Basic.Framework.Logging.LogType.Info">
            <summary>
            信息日志
            </summary>
        </member>
        <member name="F:Basic.Framework.Logging.LogType.Exception">
            <summary>
            异常日志
            </summary>
        </member>
        <member name="F:Basic.Framework.Logging.LogType.Debug">
            <summary>
            调试日志
            </summary>
        </member>
        <member name="T:Basic.Framework.Logging.MemoryLogManager">
            <summary>
            内存日志类
            </summary>
        </member>
        <member name="T:Basic.Framework.Rpc.BaseRequest">
            <summary>
            请求实体基类
            </summary>
        </member>
        <member name="M:Basic.Framework.Rpc.BaseRequest.#ctor(System.Int32)">
            <summary>
            构造方法（必须实现）
            </summary>
            <param name="requestType">请求参数（必传，值大于0）</param>
        </member>
        <member name="P:Basic.Framework.Rpc.BaseRequest.RequestType">
            <summary>
            请求类型
            </summary>
        </member>
        <member name="T:Basic.Framework.Message.OnMessageReceived">
            <summary>
                作者：罗春虎
            创建时间：2016-8-3
            功能描述：消息接受事件
            </summary>
        </member>
        <member name="T:Basic.Framework.Message.IMessageQueue">
            <summary>
                作者：罗春虎
            创建时间：2016-8-3
            功能描述：消息队列统一接口
            </summary>
        </member>
        <member name="M:Basic.Framework.Message.IMessageQueue.SendMessage(Basic.Framework.Message.QueueMessage)">
            <summary>
            往队列里面发送一条消息
            </summary>
            <param name="Message">队列消息</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Message.IMessageQueue.Start">
            <summary>
            启动消息接受服务，如果被启动则在程序关闭时候需要调用stop方法进行关闭释放资源
            </summary>
        </member>
        <member name="M:Basic.Framework.Message.IMessageQueue.Stop">
            <summary>
            停止消息接受服务
            </summary>
        </member>
        <member name="M:Basic.Framework.Message.IMessageQueue.PopMessage">
            <summary>
            手工获取一条数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Message.IMessageQueue.PopMessages(System.Int32)">
            <summary>
            批量pop数据
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="P:Basic.Framework.Message.IMessageQueue.ChannelName">
            <summary>
            消息队列通道名称
            </summary>
        </member>
        <member name="E:Basic.Framework.Message.IMessageQueue.OnMessageReceived">
            <summary>
            接受消息队列时间
            </summary>
        </member>
        <member name="P:Basic.Framework.Message.IMessageQueue.MessageCount">
            <summary>
            获取当前队列消息数量
            </summary>
        </member>
        <member name="T:Basic.Framework.Message.QueueManager">
            <summary>
                作者：罗春虎
            创建时间：2016-8-3
            功能描述：消息队列管理器
            </summary>
        </member>
        <member name="M:Basic.Framework.Message.QueueManager.CreateMessageQueue(System.String)">
            <summary>
            创建消息队列
            </summary>
            <param name="channelName"></param>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Message.QueueMessage">
            <summary>
                作者：罗春虎
            创建时间：2016-8-3
            功能描述：消息对象
            </summary>
        </member>
        <member name="P:Basic.Framework.Message.QueueMessage.Message">
            <summary>
            消息内容
            </summary>
        </member>
        <member name="P:Basic.Framework.Message.QueueMessage.ChannelName">
            <summary>
            消息所走队列
            </summary>
        </member>
        <member name="T:Basic.Framework.Message.QueueMessageEventArgs">
            <summary>
                作者：罗春虎
            创建时间：2016-8-3
            功能描述：消息事件参数
            </summary>
        </member>
        <member name="P:Basic.Framework.Message.QueueMessageEventArgs.QueueMessage">
            <summary>
            消息参数
            </summary>
        </member>
        <member name="T:Basic.Framework.Message.RedisMessageQueue">
            <summary>
                作者：罗春虎
            创建时间：2016-8-3
            功能描述：redis提供的消息队列服务封装
            </summary>
        </member>
        <member name="M:Basic.Framework.Message.RedisMessageQueue.#ctor">
            <summary>
            默认构造函数，如使用此构造函数，则必须对ChannelName进行设置
            </summary>
        </member>
        <member name="M:Basic.Framework.Message.RedisMessageQueue.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="channelName">消息队列名称</param>
        </member>
        <member name="M:Basic.Framework.Message.RedisMessageQueue.SendMessage(Basic.Framework.Message.QueueMessage)">
            <summary>
            发送消息
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Message.RedisMessageQueue.Start">
            <summary>
            启动消息接受服务
            </summary>
        </member>
        <member name="M:Basic.Framework.Message.RedisMessageQueue.Stop">
            <summary>
            停止消息接受服务
            </summary>
        </member>
        <member name="M:Basic.Framework.Message.RedisMessageQueue.Dispose">
            <summary>
            释放资源，由于使用了链接重复使用方式，暂时没有处理释放功能。
            </summary>
        </member>
        <member name="M:Basic.Framework.Message.RedisMessageQueue.PopMessage">
            <summary>
            手动从消息队列中提取一条消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Message.RedisMessageQueue.PopMessages(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="E:Basic.Framework.Message.RedisMessageQueue.OnMessageReceived">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.Message.RedisMessageQueue.ChannelName">
            <summary>
            消息队列通道名称
            </summary>
        </member>
        <member name="P:Basic.Framework.Message.RedisMessageQueue.MessageCount">
            <summary>
            获取指定队列未处理的消息条数
            </summary>
        </member>
        <member name="T:Basic.Framework.Rpc.RpcRequest">
            <summary>
            Rpc调用请求对象
            </summary>
        </member>
        <member name="M:Basic.Framework.Rpc.RpcRequest.ToRequest``1">
            <summary>
            业务请求对象转换方法
            </summary>
            <typeparam name="TRquest">业务请求类型</typeparam>
            <returns>转换后的业务对象</returns>
        </member>
        <member name="P:Basic.Framework.Rpc.RpcRequest.RequestType">
            <summary>
            请求类型
            </summary>
        </member>
        <member name="P:Basic.Framework.Rpc.RpcRequest.JsonRquest">
            <summary>
            业务请求的Json字符串
            </summary>
        </member>
        <member name="F:Basic.Framework.Rpc.Common.RpcRequestType.LogQueryRequest">
            <summary>
            日志查询请求
            </summary>
        </member>
        <member name="T:Basic.Framework.Rpc.RpcResponse">
            <summary>
            Rpc组件返回对象
            </summary>
        </member>
        <member name="M:Basic.Framework.Rpc.RpcResponse.Response``1(``0)">
            <summary>
            生成RPC远程调用的应答对象
            </summary>
            <typeparam name="TResult">业务返回对象</typeparam>
            <param name="result">业务返回对象</param>
            <returns>Rpc应答对象</returns>
        </member>
        <member name="P:Basic.Framework.Rpc.RpcResponse.JsonData">
            <summary>
            业务返回对象的json值
            </summary>
        </member>
        <member name="T:Basic.Framework.Rpc.RpcResponse`1">
            <summary>
            Rpc调用客户端应答对象
            </summary>
            <typeparam name="TResult">业务返回值</typeparam>
        </member>
        <member name="M:Basic.Framework.Rpc.RpcResponse`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Basic.Framework.Rpc.RpcResponse`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="code">编码</param>
        </member>
        <member name="M:Basic.Framework.Rpc.RpcResponse`1.#ctor(System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="code">编码</param>
            <param name="message">信息描述</param>
        </member>
        <member name="P:Basic.Framework.Rpc.RpcResponse`1.Data">
            <summary>
            泛型业务数据
            </summary>
        </member>
        <member name="P:Basic.Framework.Rpc.RpcResponse`1.Message">
            <summary>
            消息描述
            </summary>
        </member>
        <member name="P:Basic.Framework.Rpc.RpcResponse`1.Code">
            <summary>
            返回编码
            100成功
            -100失败
            </summary>
        </member>
        <member name="P:Basic.Framework.Rpc.RpcResponse`1.IsSuccess">
            <summary>
            是否执行成功
            </summary>
        </member>
        <member name="F:Basic.Framework.Rpc.RpcUrl.Url_RpcCall">
            <summary>
            Rpc核心调用URL
            </summary>
        </member>
        <member name="F:Basic.Framework.Rpc.RpcUrl.Url_Heartbeat">
            <summary>
            心跳检测URL
            </summary>
        </member>
        <member name="M:Basic.Framework.Rpc.RpcUrl.GetAddress(System.String)">
            <summary>
            获取完整的WebAPI调用地址
            </summary>
            <param name="postfixUrl">URL后缀（IP及端口号后部分）</param>
            <returns>WebAPI调用地址</returns>
        </member>
        <member name="P:Basic.Framework.Rpc.RpcUrl.ServerPort">
            <summary>
            RPC端口号
            </summary>
        </member>
        <member name="P:Basic.Framework.Rpc.RpcUrl.ServerIp">
            <summary>
            RPC服务器地址
            </summary>
        </member>
        <member name="T:Basic.Framework.Rpc.IRpcClient">
            <summary>
            RPC客户端接口
            </summary>
        </member>
        <member name="M:Basic.Framework.Rpc.IRpcClient.IsConnected">
            <summary>
            RPC服务器是否正常连接
            </summary>
            <returns>True:连接正常；False:连接失败；</returns>
        </member>
        <member name="M:Basic.Framework.Rpc.IRpcClient.Send``2(``0)">
            <summary>
            发送消息（调用RPC远程服务器）
            </summary>
            <typeparam name="TRequest">请求对象</typeparam>
            <typeparam name="TResult">返回值对象</typeparam>
            <param name="request">请求对象，TRequest必须继承BaseRequest</param>
            <returns>请求返回值</returns>
        </member>
        <member name="M:Basic.Framework.Rpc.IRpcClient.ShutDown">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="T:Basic.Framework.Rpc.IRpcServer">
            <summary>
            RPC服务端接口
            </summary>
        </member>
        <member name="M:Basic.Framework.Rpc.IRpcServer.Start(System.String,System.Int32)">
            <summary>
            启动Rpc服务端
            </summary>
            <param name="serverIp">Ip地址</param>
            <param name="serverPort">端口号</param>
            <returns>True:启动成功；False：启动失败</returns>
        </member>
        <member name="M:Basic.Framework.Rpc.IRpcServer.Stop">
            <summary>
            停止Rpc服务端
            </summary>
            <returns>True:停止成功；False：停止失败</returns>
        </member>
        <member name="M:Basic.Framework.Rpc.IRpcServer.RegistCallback(Basic.Framework.Rpc.RpcMessageArriveEventHandler)">
            <summary>
            注册收到RPC调用回调函数
            </summary>
            <param name="hander">收到RPC消息委托</param>
        </member>
        <member name="M:Basic.Framework.Rpc.gPRCRpcClientProvider.HandleException``1(System.Exception,Basic.Framework.Rpc.RpcResponse{``0})">
            <summary>
            RPC调用异常处理
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="ex"></param>
            <param name="response"></param>
        </member>
        <member name="M:Basic.Framework.Rpc.gPRCRpcClientProvider.GetInnerException(System.Exception)">
            <summary>
            获取最内部真正异常信息
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Rpc.gRPC.gRPCBase">
            <summary>Base class for server-side implementations of gRPC</summary>
        </member>
        <member name="M:Basic.Framework.Rpc.gRPC.BindService(Basic.Framework.Rpc.gRPC.gRPCBase)">
            <summary>Creates service definition that can be registered with a server</summary>
        </member>
        <member name="P:Basic.Framework.Rpc.gRPC.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Basic.Framework.Rpc.gRPC.gRPCBase">
            <summary>Base class for server-side implementations of gRPC</summary>
        </member>
        <member name="T:Basic.Framework.Rpc.gRPC.gRPCClient">
            <summary>Client for gRPC</summary>
        </member>
        <member name="M:Basic.Framework.Rpc.gRPC.gRPCClient.#ctor(Grpc.Core.Channel)">
            <summary>Creates a new client for gRPC</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Basic.Framework.Rpc.gRPC.gRPCClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for gRPC that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Basic.Framework.Rpc.gRPC.gRPCClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Basic.Framework.Rpc.gRPC.gRPCClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="T:Basic.Framework.Rpc.TransferReflection">
            <summary>Holder for reflection information generated from Transfer.proto</summary>
        </member>
        <member name="P:Basic.Framework.Rpc.TransferReflection.Descriptor">
            <summary>File descriptor for Transfer.proto</summary>
        </member>
        <member name="F:Basic.Framework.Rpc.TransferRequest.MessageFieldNumber">
            <summary>Field number for the "message" field.</summary>
        </member>
        <member name="F:Basic.Framework.Rpc.TransferReply.MessageFieldNumber">
            <summary>Field number for the "message" field.</summary>
        </member>
        <member name="T:Basic.Framework.Rpc.WebApi.WebApiMessageArriveEventHandler">
            <summary>
            WebApi消息到达委托
            </summary>
            <param name="request">调用请求</param>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Rpc.WebApi.RpcWebApiController">
            <summary>
            Rpc WebApi控制器
            </summary>
        </member>
        <member name="M:Basic.Framework.Rpc.WebApi.RpcWebApiController.RequestAuth(Basic.Framework.Rpc.WebApi.WebApiRequest)">
            <summary>
            请求权限验证
            </summary>
            <param name="request">WebApi请求对象</param>
            <returns>True:验证成功；False：验证失败</returns>
        </member>
        <member name="M:Basic.Framework.Rpc.WebApi.RpcWebApiController.RpcCall(Basic.Framework.Rpc.WebApi.WebApiRequest)">
            <summary>
            Rpc WebApi核心调用方法
            </summary>
            <param name="request">WebApi请求对象</param>
            <returns>WebApi应答对象</returns>
        </member>
        <member name="M:Basic.Framework.Rpc.WebApi.RpcWebApiController.CheckHeartbeat(Basic.Framework.Rpc.WebApi.WebApiRequest)">
            <summary>
            心跳检测方法
            </summary>
            <param name="request">WebApi请求对象</param>
            <returns>WebApi应答对象</returns>
        </member>
        <member name="M:Basic.Framework.Rpc.WebApi.RpcWebApiController.Test">
            <summary>
            测试Get方法(保留)
            </summary>
            <returns></returns>
        </member>
        <member name="E:Basic.Framework.Rpc.WebApi.RpcWebApiController.OnWebApiMessageArrived">
            <summary>
            WebApi请求调用事件
            </summary>
        </member>
        <member name="T:Basic.Framework.Rpc.WebApi.WebApiRequest">
            <summary>
            WebApi请求对象
            </summary>
        </member>
        <member name="M:Basic.Framework.Rpc.WebApi.WebApiRequest.ToRpcRequest">
            <summary>
            WebApiRequest对象转RpcRequest对象
            </summary>
            <returns>转换后的RpcRequest对象</returns>
        </member>
        <member name="P:Basic.Framework.Rpc.WebApi.WebApiRequest.RequestType">
            <summary>
            请求类型
            </summary>
        </member>
        <member name="P:Basic.Framework.Rpc.WebApi.WebApiRequest.AppCode">
            <summary>
            应用编码
            </summary>
        </member>
        <member name="P:Basic.Framework.Rpc.WebApi.WebApiRequest.Password">
            <summary>
            调用密码
            </summary>
        </member>
        <member name="P:Basic.Framework.Rpc.WebApi.WebApiRequest.JsonRquest">
            <summary>
            请求业务对象的Json字符串
            </summary>
        </member>
        <member name="T:Basic.Framework.Rpc.WebApi.WebApiResponse">
            <summary>
            WebApi应答对象
            </summary>
        </member>
        <member name="M:Basic.Framework.Rpc.WebApi.WebApiResponse.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Basic.Framework.Rpc.WebApi.WebApiResponse.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="code">编码</param>
        </member>
        <member name="M:Basic.Framework.Rpc.WebApi.WebApiResponse.#ctor(System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="code">编码</param>
            <param name="message">信息描述</param>
        </member>
        <member name="P:Basic.Framework.Rpc.WebApi.WebApiResponse.JsonData">
            <summary>
            业务数据
            </summary>
        </member>
        <member name="P:Basic.Framework.Rpc.WebApi.WebApiResponse.Message">
            <summary>
            消息描述
            </summary>
        </member>
        <member name="P:Basic.Framework.Rpc.WebApi.WebApiResponse.Code">
            <summary>
            返回编码
            100成功
            -100失败
            </summary>
        </member>
        <member name="P:Basic.Framework.Rpc.WebApi.WebApiResponse.IsSuccess">
            <summary>
            是否执行成功
            </summary>
        </member>
        <member name="T:Basic.Framework.Rpc.WenApiRpcClientProvider">
            <summary>
            Rpc组件客户端
            </summary>
        </member>
        <member name="F:Basic.Framework.Rpc.WenApiRpcClientProvider._rpcUrl">
            <summary>
            rpc webapi地址相关
            </summary>
        </member>
        <member name="M:Basic.Framework.Rpc.WenApiRpcClientProvider.#ctor(System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="serverIp">Ip地址</param>
            <param name="serverPort">端口号</param>
        </member>
        <member name="M:Basic.Framework.Rpc.WenApiRpcClientProvider.IsConnected">
            <summary>
            RPC服务器是否正常连接
            </summary>
            <returns>True:连接正常；False:连接失败；</returns>
        </member>
        <member name="M:Basic.Framework.Rpc.WenApiRpcClientProvider.Send``2(``0)">
            <summary>
            发送消息（调用RPC远程服务器）
            </summary>
            <typeparam name="TRequest">请求对象</typeparam>
            <typeparam name="TResult">返回值对象</typeparam>
            <param name="request">请求对象，TRequest必须继承BaseRequest</param>
            <returns>请求返回值</returns>
        </member>
        <member name="M:Basic.Framework.Rpc.WenApiRpcClientProvider.HandleException``1(System.Exception,Basic.Framework.Rpc.RpcResponse{``0})">
            <summary>
            RPC调用异常处理
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="ex"></param>
            <param name="response"></param>
        </member>
        <member name="M:Basic.Framework.Rpc.WenApiRpcClientProvider.GetInnerException(System.Exception)">
            <summary>
            获取最内部真正异常信息
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Rpc.RpcMessageArriveEventHandler">
            <summary>
            Rpc请求到达委托
            </summary>
            <param name="rpcRequest">Rpc请求对象</param>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Rpc.WebApiRpcServerProvider">
            <summary>
            Rpc组件服务端
            </summary>
        </member>
        <member name="F:Basic.Framework.Rpc.WebApiRpcServerProvider.OnRpcMessageArrived">
            <summary>
            Rpc请求到达事件
            </summary>
        </member>
        <member name="M:Basic.Framework.Rpc.WebApiRpcServerProvider.#ctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:Basic.Framework.Rpc.WebApiRpcServerProvider.RpcWebApiController_OnWebApiMessageArrived(Basic.Framework.Rpc.RpcRequest)">
            <summary>
            WebApi请求到达事件
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Rpc.WebApiRpcServerProvider.Start(System.String,System.Int32)">
            <summary>
            启动Rpc服务端
            </summary>
            <param name="serverIp">Ip地址</param>
            <param name="serverPort">端口号</param>
        </member>
        <member name="M:Basic.Framework.Rpc.WebApiRpcServerProvider.Stop">
            <summary>
            停止Rpc服务端
            </summary>
        </member>
        <member name="T:Basic.Framework.Rpc.RpcFactory">
            <summary>
            Rpc工厂类
            </summary>
        </member>
        <member name="M:Basic.Framework.Rpc.RpcFactory.CreateRpcClient(Basic.Framework.Rpc.RpcModel,System.String,System.Int32)">
            <summary>
            创建RPC客户端
            </summary>
            <param name="model">通道类型</param>
            <param name="server">服务端IP</param>
            <param name="port">服务端端口号</param>
            <returns>RpcClient客户端实现</returns>
        </member>
        <member name="M:Basic.Framework.Rpc.RpcFactory.CreateRpcServer(Basic.Framework.Rpc.RpcModel)">
            <summary>
            创建RPC服务端对象
            </summary>
            <param name="model">通道类型</param>
            <returns>RPC服务端实现</returns>
        </member>
        <member name="P:Basic.Framework.Rpc.RpcFactory.IsWriteRpcLog">
            <summary>
            是否记录RPC日志，默认不记录
            </summary>
        </member>
        <member name="T:Basic.Framework.Service.ChannelFactory`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Basic.Framework.Service.ChannelFactory`1.CreateChannel">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Service.IService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Basic.Framework.Service.IService.GetService``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Service.LocalServiceProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Basic.Framework.Service.LocalServiceProvider.GetService``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Service.ServiceFactory">
            <summary>
                作者：罗春虎
            创建时间：2016-8-1
            功能描述：服务管理
            </summary>
        </member>
        <member name="M:Basic.Framework.Service.ServiceFactory.Create``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Service.ServiceFactory.Create``1(System.String)">
            <summary>
            根据别名创建对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">服务别名</param>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Service.WebApiServiceProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Basic.Framework.Service.WebApiServiceProvider.GetService``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Version.DESHelper">
            <summary>
                作者：罗春虎
            创建时间：2016-8-11
            功能描述：授权管理帮助类
            </summary>
        </member>
        <member name="M:Basic.Framework.Version.DESHelper.GetFormatMachineCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Version.DESHelper.GetMachineCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Version.DESHelper.GetCpuID">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Version.DESHelper.GetMacAddress">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Version.DESHelper.GetDiskID">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Version.AuthorizationInfo">
            <summary>
            授权信息类
            </summary>
        </member>
        <member name="P:Basic.Framework.Version.AuthorizationInfo.PublicKey">
            <summary>
            加密公匙
            </summary>
        </member>
        <member name="P:Basic.Framework.Version.AuthorizationInfo.RegisterCode">
            <summary>
            加密后的注册码
            </summary>
        </member>
        <member name="P:Basic.Framework.Version.AuthorizationInfo.ProductCode">
            <summary>
            授权产品编码
            </summary>
        </member>
        <member name="P:Basic.Framework.Version.AuthorizationInfo.CustomerInfo">
            <summary>
            客户信息
            </summary>
        </member>
        <member name="P:Basic.Framework.Version.AuthorizationInfo.AuthorizeMode">
            <summary>
            授权模式
            0：试用模式；1：开发模式  2：商用模式；
            </summary>
        </member>
        <member name="P:Basic.Framework.Version.AuthorizationInfo.EndTime">
            <summary>
            授权有效期
            </summary>
        </member>
        <member name="P:Basic.Framework.Version.AuthorizationInfo.Terminals">
            <summary>
            授权终端数量
            </summary>
        </member>
        <member name="T:Basic.Framework.Version.RSAHelper">
            <summary>
            RSA 加密帮助管理类
            </summary>
        </member>
        <member name="M:Basic.Framework.Version.RSAHelper.CreateKey(System.String@,System.String@)">
            <summary>
            生成密钥对
            </summary>
            <param name="publicKey"></param>
            <param name="privateKey"></param>
        </member>
        <member name="M:Basic.Framework.Version.RSAHelper.CreateRegistCode(System.String,System.String)">
            <summary>
            创建注册码
            </summary>
            <param name="privateKey"></param>
            <param name="targetKey"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Version.RSAHelper.VerifyRegistCode(System.String,System.String,System.String)">
            <summary>
            验证注册
            </summary>
            <param name="publicKey"></param>
            <param name="registCode"></param>
            <param name="targetKey"></param>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Version.Version">
            <summary>
                作者：罗春虎
            创建时间：2016-8-11
            功能描述：版本管理类1
            </summary>
        </member>
        <member name="M:Basic.Framework.Version.Version.IsAuthorized">
            <summary>
            验证是否授权执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Version.Version.VerifyLicense">
            <summary>
            验证是否有授权文件，授权文件是否正确
            </summary>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Version.Version.VerifyRegistCode(System.String,System.String)">
            <summary>
            授权验证
            </summary>
            <param name="publicKey"></param>
            <param name="registerCodes"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Version.Version.GetVersion">
            <summary>
            获取框架版本信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:Basic.Framework.Version.Version.VersionNo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Basic.Framework.Version.Version.Description">
            <summary>
            
            </summary>
        </member>
        <member name="T:Basic.InfoState">
            <summary>
            实体状态枚举
            </summary>
        </member>
        <member name="T:Basic.Framework.Web.BasicRequest">
            <summary>
            请求对象
            </summary>
        </member>
        <member name="T:Basic.Framework.Web.BasicResponse">
            <summary>
             Basic应答实体对象
             </summary>
        </member>
        <member name="M:Basic.Framework.Web.BasicResponse.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Basic.Framework.Web.BasicResponse.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="code">编码</param>
        </member>
        <member name="M:Basic.Framework.Web.BasicResponse.#ctor(System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="code">编码</param>
            <param name="message">信息描述</param>
        </member>
        <member name="P:Basic.Framework.Web.BasicResponse.Message">
            <summary>
            消息描述
            </summary>       
        </member>
        <member name="P:Basic.Framework.Web.BasicResponse.Code">
            <summary>
            返回编码
            100成功
            -100失败
            </summary>
        </member>
        <member name="P:Basic.Framework.Web.BasicResponse.IsSuccess">
            <summary>
            是否执行成功
            </summary>
        </member>
        <member name="T:Basic.Framework.Web.BasicResponse`1">
            <summary>
            Basic泛型应答对象实体
            </summary>
            <typeparam name="T">返回的数据体（Data的数据类型）</typeparam>
        </member>
        <member name="M:Basic.Framework.Web.BasicResponse`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Basic.Framework.Web.BasicResponse`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="code">编码</param>
        </member>
        <member name="M:Basic.Framework.Web.BasicResponse`1.#ctor(System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="code">编码</param>
            <param name="message">信息描述</param>
        </member>
        <member name="P:Basic.Framework.Web.BasicResponse`1.Data">
            <summary>
            泛型业务数据
            </summary>
        </member>
        <member name="T:Basic.Framework.Web.BasicResponseCodes">
            <summary>
            返回值码定义
            </summary>   
        </member>
        <member name="F:Basic.Framework.Web.BasicResponseCodes.CommonSuccess">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:Basic.Framework.Web.BasicResponseCodes.NeedLogin">
            <summary>
            未登陆或者token已失效，需要重新登录
            </summary>
        </member>
        <member name="F:Basic.Framework.Web.BasicResponseCodes.Forbid">
            <summary>
            请求频繁，非法访问，请稍后再试
            </summary>
        </member>
        <member name="F:Basic.Framework.Web.BasicResponseCodes.ParamsError">
            <summary>
            参数错误
            </summary>
        </member>
        <member name="F:Basic.Framework.Web.BasicResponseCodes.Abnormity">
            <summary>
            操作异常
            </summary>
        </member>
        <member name="F:Basic.Framework.Web.BasicResponseCodes.CommonFailure">
            <summary>
            执行意外失败
            </summary>
        </member>
        <member name="F:Basic.Framework.Web.BasicResponseCodes.CommonBusinessFailure">
            <summary>
            业务意外失败
            </summary>
        </member>
        <member name="F:Basic.Framework.Web.BasicResponseCodes.CommonSuccessMessage">
            <summary>
            成功的默认描述
            </summary>
        </member>
        <member name="F:Basic.Framework.Web.BasicResponseCodes.NeedLoginMessage">
            <summary>
            未登录或者token过期提示
            </summary>
        </member>
        <member name="F:Basic.Framework.Web.BasicResponseCodes.CommonFailureMessage">
            <summary>
            失败的默认描述
            </summary>
        </member>
        <member name="M:Basic.Framework.Web.BasicResponseCodes.GetMessage(System.Int32)">
            <summary>
            根据编码获取提示信息
            </summary>
            <param name="code">编码</param>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Web.PagerInfo">
            <summary>
            翻页信息基类
            </summary>
        </member>
        <member name="T:Basic.Framework.Web.CookiesManager">
            <summary>
                作者：罗春虎
            创建时间：2016-8-1
            功能描述：cookies管理器
            </summary>
        </member>
        <member name="M:Basic.Framework.Web.CookiesManager.GetCookie(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Web.CookiesManager.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:Basic.Framework.Web.Session.DefaultSessionProvider">
            <summary>
                作者：罗春虎
            创建时间：2016-8-1
            功能描述：默认会话管理器
            </summary>
        </member>
        <member name="T:Basic.Framework.Web.Session.ISession">
            <summary>
                作者：罗春虎
            创建时间：2016-7-29
            功能描述：统一会话管理接口
            </summary>
        </member>
        <member name="M:Basic.Framework.Web.Session.ISession.GetSessionId">
            <summary>
            获取会话ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Web.Session.ISession.SetSessionId(System.String)">
            <summary>
            设置当前登录用户会话Id
            </summary>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Web.Session.ISession.SetSession``1(System.String,``0)">
            <summary>
            设置会话
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Basic.Framework.Web.Session.ISession.GetSession``1(System.String)">
            <summary>
            获取会话
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Web.Session.ISession.Remove(System.String)">
            <summary>
            移除会话
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Basic.Framework.Web.Session.ISession.RemoveAll">
            <summary>
            移除所有会话
            </summary>
        </member>
        <member name="M:Basic.Framework.Web.Session.ISession.Abandon">
            <summary>
            设置会话失效
            </summary>
        </member>
        <member name="P:Basic.Framework.Web.Session.ISession.Timeout">
            <summary>
            会话过期时间
            </summary>
        </member>
        <member name="P:Basic.Framework.Web.Session.ISession.IsReady">
            <summary>
            缓存是否准备就绪
            </summary>
        </member>
        <member name="M:Basic.Framework.Web.Session.DefaultSessionProvider.Abandon">
            <summary>
            设置会话过期
            </summary>
        </member>
        <member name="M:Basic.Framework.Web.Session.DefaultSessionProvider.GetSession``1(System.String)">
            <summary>
            后去会话值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Web.Session.DefaultSessionProvider.GetSessionId">
            <summary>
            获取会话ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Web.Session.DefaultSessionProvider.Remove(System.String)">
            <summary>
            移除会话
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Basic.Framework.Web.Session.DefaultSessionProvider.RemoveAll">
            <summary>
            移除所有会话
            </summary>
        </member>
        <member name="M:Basic.Framework.Web.Session.DefaultSessionProvider.SetSession``1(System.String,``0)">
            <summary>
            设置会话
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Basic.Framework.Web.Session.DefaultSessionProvider.SetSessionId(System.String)">
            <summary>
            
            </summary>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="P:Basic.Framework.Web.Session.DefaultSessionProvider.IsReady">
            <summary>
            是否准备就绪
            </summary>
        </member>
        <member name="P:Basic.Framework.Web.Session.DefaultSessionProvider.Timeout">
            <summary>
            会话超时时间
            </summary>
        </member>
        <member name="T:Basic.Framework.Web.Session.MongoDBSessionProvider">
            <summary>
            作者：罗春虎
            创建时间：2017-8-16
            功能描述：MongoDB session管理器
            </summary>
        </member>
        <member name="P:Basic.Framework.Web.Session.MongoDBSessionProvider.IsReady">
            <summary>
            
            </summary>
        </member>
        <member name="T:Basic.Framework.Web.Session.RedisSessionProvider">
            <summary>
                作者：罗春虎
            创建时间：2016-8-1
            功能描述：redis session管理器
            </summary>
        </member>
        <member name="P:Basic.Framework.Web.Session.RedisSessionProvider.IsReady">
            <summary>
            
            </summary>
        </member>
        <member name="T:Basic.Framework.Web.Session.SessionFactory">
            <summary>
                作者：罗春虎
            创建时间：2016-8-1
            功能描述：会话管理工厂
            </summary>
        </member>
        <member name="T:Basic.Framework.Web.SessionManager">
            <summary>
                作者：罗春虎
            创建时间：2016-8-1
            功能描述：会话统一管理器
            </summary>
        </member>
        <member name="P:Basic.Framework.Web.SessionManager.Session">
            <summary>
            会话
            </summary>
        </member>
        <member name="P:Basic.Framework.Web.SessionManager.UserId">
            <summary>
            用户Id
            </summary>
        </member>
        <member name="P:Basic.Framework.Web.SessionManager.UserName">
            <summary>
            用户登录名
            </summary>
        </member>
        <member name="P:Basic.Framework.Web.SessionManager.TrueName">
            <summary>
            用户真实姓名
            </summary>
        </member>
        <member name="P:Basic.Framework.Web.SessionManager.Permissions">
            <summary>
            用户权限
            </summary>
        </member>
        <member name="T:Basic.Framework.Web.Onlines">
            <summary>
            在线用户处理
            add by 罗春虎 2014-1-8
            
            onlines v2.0
            修改时间：2014-7-29 修改人：罗春虎
            修改内容：重构在线用户统计功能解决以下问题
                      1、返回的用户名中有多余逗号问题
                      2、解决程序在多个应用程序域运行时，在线用户只能按域统计问题
                      3、为接下来的在线用户扩展提供底层支持功能
                      
            onlines v2.1
            修改时间：2014-7-30 修改人：罗春虎
            修改内容：增加判断用户是否在线api接口
            </summary>
        </member>
        <member name="M:Basic.Framework.Web.Onlines.Active(System.String,System.String)">
            <summary>
            激活用户
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Basic.Framework.Web.Onlines.SetOnline(System.String,System.String)">
            <summary>
            设置用户上线
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Basic.Framework.Web.Onlines.SetOffline(System.String)">
            <summary>
            设置用户下线
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Basic.Framework.Web.Onlines.GetOnlineCount">
            <summary>
            获取当前用户数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Web.Onlines.GetOnlineNames">
            <summary>
            获取在线人员字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Web.Onlines.GetOnlineUser">
            <summary>
            获取在线人员名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Web.Onlines.IsOnline(System.String)">
            <summary>
            判断用户是否在线
            </summary>
            <param name="userId">用户ID</param>
            <returns></returns>
        </member>
        <member name="T:Basic.Framework.Web.CacheItem">
            <summary>
            token 存储项目
            </summary>
        </member>
        <member name="P:Basic.Framework.Web.CacheItem.TrueName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:Basic.Framework.Web.CacheItem.UserId">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:Basic.Framework.Web.CacheItem.UserName">
            <summary>
            登录名
            </summary>
        </member>
        <member name="P:Basic.Framework.Web.CacheItem.ExpireTime">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:Basic.Framework.Web.CacheItem.UserType">
            <summary>
            用户类型
            </summary>
        </member>
        <member name="P:Basic.Framework.Web.CacheItem.Code">
            <summary>
            组织机构
            </summary>
        </member>
        <member name="T:Basic.Framework.Web.TokenAuthFilterAttribute">
            <summary>
            token 拦截类
            </summary>
        </member>
        <member name="M:Basic.Framework.Web.TokenAuthFilterAttribute.OnActionExecuting(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            
            </summary>
            <param name="actionContext"></param>
        </member>
        <member name="T:Basic.Framework.Web.TokenCache">
            <summary>
            token 存储管理类,实现token的存储和自动过期工作
            存储空间估算：10万用户占用内存24M左右   
            </summary>
        </member>
        <member name="P:Basic.Framework.Web.TokenCache.ExpireSeconds">
            <summary>
            过期时间，单位（秒）
            </summary>
        </member>
        <member name="T:Basic.Framework.Web.TokenManger">
            <summary>
            token 管理类实现，实现token的颁发和认证功能
            </summary>
        </member>
        <member name="M:Basic.Framework.Web.TokenManger.Award(System.String,System.String,Basic.Framework.Web.CacheItem)">
            <summary>
            function：根据登录成功后的帐号id和姓名生成一个token
            author：罗春虎
            date：2015-10-27
            </summary>
            <param name="userId"></param>
            <param name="userName"></param>
            <param name="target">自定义存储对象，可以跟进颁发的token获取对应的自存值，方便系统使用,本版本暂时不支持此功能</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Web.TokenManger.VerifyToken(System.String)">
            <summary>
            function：验证token的有效性
            author：罗春虎
            date：2015-10-27
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Web.TokenManger.GetCacheItemByToken(System.String)">
            <summary>
            根据token获取用户信息
            author:罗春虎
            date:2016-12-05
            </summary>
            <param name="token">给用户颁发的token</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Web.TokenManger.GetUserById">
             <summary>
            测试方法，根据用户获取id
             </summary>
             <returns></returns>
        </member>
        <member name="M:Basic.Framework.Web.TokenManger.Audit(System.String)">
            <summary>
            对当前请求token进行审计
            author：罗春虎
            date：2016-10-27
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Web.TokenManger.Logout(System.String)">
            <summary>
            
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Web.TokenManger.#cctor">
            <summary>
            构造函数 webapi缓存管理
            author：罗春虎
            date：2016-12-05
            </summary>
        </member>
        <member name="T:Basic.Framework.Web.WebApi.WebApiExceptionFilterAttribute">
            <summary>
            WebApi异常统一处理
            </summary>
        </member>
        <member name="M:Basic.Framework.Web.WebApi.WebApiExceptionFilterAttribute.OnException(System.Web.Http.Filters.HttpActionExecutedContext)">
            <summary>
            重写基类的异常处理方法
            </summary>
            <param name="actionExecutedContext"></param>
        </member>
        <member name="T:Basic.Framework.Web.WebApi.BasicApiController">
            <summary>
            WebApi基类
            </summary>
        </member>
        <member name="T:Basic.Framework.Web.WebApi.Proxy.HttpClientHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Basic.Framework.Web.WebApi.Proxy.HttpClientHelper.Post(System.String,System.String,System.Int32)">
            <summary>
            Post数据到服务端
            </summary>
            <param name="url">请求Url</param>
            <param name="request">请求数据</param>
            <param name="timeout">超时时间；（单位：秒，默认120秒）</param>
            <returns></returns>
        </member>
        <member name="M:Basic.Framework.Web.WebApi.Proxy.HttpClientHelper.Get(System.String)">
             <summary>
             
             </summary>
            <param name="url"></param>
             <returns></returns>
        </member>
    </members>
</doc>
